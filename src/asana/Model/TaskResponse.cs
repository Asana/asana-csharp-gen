/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// TaskResponse
    /// </summary>
    [DataContract]
    public partial class TaskResponse :  IEquatable<TaskResponse>, IValidatableObject
    {
        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum Defaulttask for value: default_task
            /// </summary>
            [EnumMember(Value = "default_task")]
            Defaulttask = 1,

            /// <summary>
            /// Enum Milestone for value: milestone
            /// </summary>
            [EnumMember(Value = "milestone")]
            Milestone = 2,

            /// <summary>
            /// Enum Section for value: section
            /// </summary>
            [EnumMember(Value = "section")]
            Section = 3,

            /// <summary>
            /// Enum Approval for value: approval
            /// </summary>
            [EnumMember(Value = "approval")]
            Approval = 4

        }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.</value>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }
        /// <summary>
        /// *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
        /// </summary>
        /// <value>*Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApprovalStatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 2,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 3,

            /// <summary>
            /// Enum Changesrequested for value: changes_requested
            /// </summary>
            [EnumMember(Value = "changes_requested")]
            Changesrequested = 4

        }

        /// <summary>
        /// *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
        /// </summary>
        /// <value>*Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.</value>
        [DataMember(Name="approval_status", EmitDefaultValue=false)]
        public ApprovalStatusEnum? ApprovalStatus { get; set; }
        /// <summary>
        /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
        /// </summary>
        /// <value>*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssigneeStatusEnum
        {
            /// <summary>
            /// Enum Today for value: today
            /// </summary>
            [EnumMember(Value = "today")]
            Today = 1,

            /// <summary>
            /// Enum Upcoming for value: upcoming
            /// </summary>
            [EnumMember(Value = "upcoming")]
            Upcoming = 2,

            /// <summary>
            /// Enum Later for value: later
            /// </summary>
            [EnumMember(Value = "later")]
            Later = 3,

            /// <summary>
            /// Enum New for value: new
            /// </summary>
            [EnumMember(Value = "new")]
            New = 4,

            /// <summary>
            /// Enum Inbox for value: inbox
            /// </summary>
            [EnumMember(Value = "inbox")]
            Inbox = 5

        }

        /// <summary>
        /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
        /// </summary>
        /// <value>*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.</value>
        [DataMember(Name="assignee_status", EmitDefaultValue=false)]
        public AssigneeStatusEnum? AssigneeStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResponse" /> class.
        /// </summary>
        /// <param name="name">Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer..</param>
        /// <param name="resourceSubtype">The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date..</param>
        /// <param name="approvalStatus">*Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;..</param>
        /// <param name="assigneeStatus">*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom..</param>
        /// <param name="completed">True if the task is currently marked complete, false if not..</param>
        /// <param name="completedBy">completedBy.</param>
        /// <param name="dueAt">The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;..</param>
        /// <param name="dueOn">The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;..</param>
        /// <param name="external">external.</param>
        /// <param name="htmlNotes">[Opt In](/docs/input-output-options). The notes of the text with formatting as HTML..</param>
        /// <param name="liked">True if the task is liked by the authorized user, false if not..</param>
        /// <param name="notes">Free-form textual information associated with the task (i.e. its description)..</param>
        /// <param name="startAt">Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*.</param>
        /// <param name="startOn">The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*.</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="assigneeSection">assigneeSection.</param>
        /// <param name="parent">parent.</param>
        /// <param name="workspace">workspace.</param>
        public TaskResponse(string name = default(string), ResourceSubtypeEnum? resourceSubtype = default(ResourceSubtypeEnum?), ApprovalStatusEnum? approvalStatus = default(ApprovalStatusEnum?), AssigneeStatusEnum? assigneeStatus = default(AssigneeStatusEnum?), bool completed = default(bool), UserCompact completedBy = default(UserCompact), DateTime? dueAt = default(DateTime?), DateTime? dueOn = default(DateTime?), TaskBaseAllOfExternal external = default(TaskBaseAllOfExternal), string htmlNotes = default(string), bool liked = default(bool), string notes = default(string), DateTime? startAt = default(DateTime?), DateTime? startOn = default(DateTime?), UserCompact assignee = default(UserCompact), SectionCompact assigneeSection = default(SectionCompact), TaskCompact parent = default(TaskCompact), WorkspaceCompact workspace = default(WorkspaceCompact))
        {
            this.DueAt = dueAt;
            this.DueOn = dueOn;
            this.StartAt = startAt;
            this.StartOn = startOn;
            this.Assignee = assignee;
            this.AssigneeSection = assigneeSection;
            this.Name = name;
            this.ResourceSubtype = resourceSubtype;
            this.ApprovalStatus = approvalStatus;
            this.AssigneeStatus = assigneeStatus;
            this.Completed = completed;
            this.CompletedBy = completedBy;
            this.DueAt = dueAt;
            this.DueOn = dueOn;
            this.External = external;
            this.HtmlNotes = htmlNotes;
            this.Liked = liked;
            this.Notes = notes;
            this.StartAt = startAt;
            this.StartOn = startOn;
            this.Assignee = assignee;
            this.AssigneeSection = assigneeSection;
            this.Parent = parent;
            this.Workspace = workspace;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; private set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
        /// </summary>
        /// <value>Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }




        /// <summary>
        /// True if the task is currently marked complete, false if not.
        /// </summary>
        /// <value>True if the task is currently marked complete, false if not.</value>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public bool Completed { get; set; }

        /// <summary>
        /// The time at which this task was completed, or null if the task is incomplete.
        /// </summary>
        /// <value>The time at which this task was completed, or null if the task is incomplete.</value>
        [DataMember(Name="completed_at", EmitDefaultValue=true)]
        public DateTime? CompletedAt { get; private set; }

        /// <summary>
        /// Gets or Sets CompletedBy
        /// </summary>
        [DataMember(Name="completed_by", EmitDefaultValue=false)]
        public UserCompact CompletedBy { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.</value>
        [DataMember(Name="dependencies", EmitDefaultValue=false)]
        public List<AsanaResource> Dependencies { get; private set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.</value>
        [DataMember(Name="dependents", EmitDefaultValue=false)]
        public List<AsanaResource> Dependents { get; private set; }

        /// <summary>
        /// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.
        /// </summary>
        /// <value>The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.</value>
        [DataMember(Name="due_at", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DueAt { get; set; }

        /// <summary>
        /// The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.
        /// </summary>
        /// <value>The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.</value>
        [DataMember(Name="due_on", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DueOn { get; set; }

        /// <summary>
        /// Gets or Sets External
        /// </summary>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public TaskBaseAllOfExternal External { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.</value>
        [DataMember(Name="html_notes", EmitDefaultValue=false)]
        public string HtmlNotes { get; set; }

        /// <summary>
        /// *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
        /// </summary>
        /// <value>*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.</value>
        [DataMember(Name="hearted", EmitDefaultValue=false)]
        public bool Hearted { get; private set; }

        /// <summary>
        /// *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* Array of likes for users who have hearted this task.</value>
        [DataMember(Name="hearts", EmitDefaultValue=false)]
        public List<Like> Hearts { get; private set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.</value>
        [DataMember(Name="is_rendered_as_separator", EmitDefaultValue=false)]
        public bool IsRenderedAsSeparator { get; private set; }

        /// <summary>
        /// True if the task is liked by the authorized user, false if not.
        /// </summary>
        /// <value>True if the task is liked by the authorized user, false if not.</value>
        [DataMember(Name="liked", EmitDefaultValue=false)]
        public bool Liked { get; set; }

        /// <summary>
        /// Array of likes for users who have liked this task.
        /// </summary>
        /// <value>Array of likes for users who have liked this task.</value>
        [DataMember(Name="likes", EmitDefaultValue=false)]
        public List<Like> Likes { get; private set; }

        /// <summary>
        /// *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.
        /// </summary>
        /// <value>*Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.</value>
        [DataMember(Name="memberships", EmitDefaultValue=false)]
        public List<TaskBaseAllOfMemberships> Memberships { get; private set; }

        /// <summary>
        /// The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*
        /// </summary>
        /// <value>The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*</value>
        [DataMember(Name="modified_at", EmitDefaultValue=false)]
        public DateTime ModifiedAt { get; private set; }

        /// <summary>
        /// Free-form textual information associated with the task (i.e. its description).
        /// </summary>
        /// <value>Free-form textual information associated with the task (i.e. its description).</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// *Deprecated - please use likes instead* The number of users who have hearted this task.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* The number of users who have hearted this task.</value>
        [DataMember(Name="num_hearts", EmitDefaultValue=false)]
        public int NumHearts { get; private set; }

        /// <summary>
        /// The number of users who have liked this task.
        /// </summary>
        /// <value>The number of users who have liked this task.</value>
        [DataMember(Name="num_likes", EmitDefaultValue=false)]
        public int NumLikes { get; private set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The number of subtasks on this task. 
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The number of subtasks on this task. </value>
        [DataMember(Name="num_subtasks", EmitDefaultValue=false)]
        public int NumSubtasks { get; private set; }

        /// <summary>
        /// Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*
        /// </summary>
        /// <value>Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*</value>
        [DataMember(Name="start_at", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartAt { get; set; }

        /// <summary>
        /// The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*
        /// </summary>
        /// <value>The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*</value>
        [DataMember(Name="start_on", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartOn { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=true)]
        public UserCompact Assignee { get; set; }

        /// <summary>
        /// Gets or Sets AssigneeSection
        /// </summary>
        [DataMember(Name="assignee_section", EmitDefaultValue=true)]
        public SectionCompact AssigneeSection { get; set; }

        /// <summary>
        /// Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an &#x60;enum_value&#x60; property for custom fields of type &#x60;enum&#x60;, a &#x60;text_value&#x60; property for custom fields of type &#x60;text&#x60;, and so on. Please note that the &#x60;gid&#x60; returned on each custom field value *is identical* to the &#x60;gid&#x60; of the custom field, which allows referencing the custom field metadata through the &#x60;/custom_fields/custom_field-gid&#x60; endpoint.
        /// </summary>
        /// <value>Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an &#x60;enum_value&#x60; property for custom fields of type &#x60;enum&#x60;, a &#x60;text_value&#x60; property for custom fields of type &#x60;text&#x60;, and so on. Please note that the &#x60;gid&#x60; returned on each custom field value *is identical* to the &#x60;gid&#x60; of the custom field, which allows referencing the custom field metadata through the &#x60;/custom_fields/custom_field-gid&#x60; endpoint.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public List<CustomFieldResponse> CustomFields { get; private set; }

        /// <summary>
        /// Array of users following this task.
        /// </summary>
        /// <value>Array of users following this task.</value>
        [DataMember(Name="followers", EmitDefaultValue=false)]
        public List<UserCompact> Followers { get; private set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public TaskCompact Parent { get; set; }

        /// <summary>
        /// *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.
        /// </summary>
        /// <value>*Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.</value>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public List<ProjectCompact> Projects { get; private set; }

        /// <summary>
        /// Array of tags associated with this task. In order to change tags on an existing task use &#x60;addTag&#x60; and &#x60;removeTag&#x60;.
        /// </summary>
        /// <value>Array of tags associated with this task. In order to change tags on an existing task use &#x60;addTag&#x60; and &#x60;removeTag&#x60;.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagCompact> Tags { get; private set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public WorkspaceCompact Workspace { get; set; }

        /// <summary>
        /// A url that points directly to the object within Asana.
        /// </summary>
        /// <value>A url that points directly to the object within Asana.</value>
        [DataMember(Name="permalink_url", EmitDefaultValue=false)]
        public string PermalinkUrl { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  AssigneeStatus: ").Append(AssigneeStatus).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CompletedBy: ").Append(CompletedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  Dependents: ").Append(Dependents).Append("\n");
            sb.Append("  DueAt: ").Append(DueAt).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  HtmlNotes: ").Append(HtmlNotes).Append("\n");
            sb.Append("  Hearted: ").Append(Hearted).Append("\n");
            sb.Append("  Hearts: ").Append(Hearts).Append("\n");
            sb.Append("  IsRenderedAsSeparator: ").Append(IsRenderedAsSeparator).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  Memberships: ").Append(Memberships).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NumHearts: ").Append(NumHearts).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  NumSubtasks: ").Append(NumSubtasks).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssigneeSection: ").Append(AssigneeSection).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  PermalinkUrl: ").Append(PermalinkUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskResponse);
        }

        /// <summary>
        /// Returns true if TaskResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gid == input.Gid ||
                    (this.Gid != null &&
                    this.Gid.Equals(input.Gid))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResourceSubtype == input.ResourceSubtype ||
                    (this.ResourceSubtype != null &&
                    this.ResourceSubtype.Equals(input.ResourceSubtype))
                ) && 
                (
                    this.ApprovalStatus == input.ApprovalStatus ||
                    (this.ApprovalStatus != null &&
                    this.ApprovalStatus.Equals(input.ApprovalStatus))
                ) && 
                (
                    this.AssigneeStatus == input.AssigneeStatus ||
                    (this.AssigneeStatus != null &&
                    this.AssigneeStatus.Equals(input.AssigneeStatus))
                ) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.CompletedBy == input.CompletedBy ||
                    (this.CompletedBy != null &&
                    this.CompletedBy.Equals(input.CompletedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Dependencies == input.Dependencies ||
                    this.Dependencies != null &&
                    input.Dependencies != null &&
                    this.Dependencies.SequenceEqual(input.Dependencies)
                ) && 
                (
                    this.Dependents == input.Dependents ||
                    this.Dependents != null &&
                    input.Dependents != null &&
                    this.Dependents.SequenceEqual(input.Dependents)
                ) && 
                (
                    this.DueAt == input.DueAt ||
                    (this.DueAt != null &&
                    this.DueAt.Equals(input.DueAt))
                ) && 
                (
                    this.DueOn == input.DueOn ||
                    (this.DueOn != null &&
                    this.DueOn.Equals(input.DueOn))
                ) && 
                (
                    this.External == input.External ||
                    (this.External != null &&
                    this.External.Equals(input.External))
                ) && 
                (
                    this.HtmlNotes == input.HtmlNotes ||
                    (this.HtmlNotes != null &&
                    this.HtmlNotes.Equals(input.HtmlNotes))
                ) && 
                (
                    this.Hearted == input.Hearted ||
                    (this.Hearted != null &&
                    this.Hearted.Equals(input.Hearted))
                ) && 
                (
                    this.Hearts == input.Hearts ||
                    this.Hearts != null &&
                    input.Hearts != null &&
                    this.Hearts.SequenceEqual(input.Hearts)
                ) && 
                (
                    this.IsRenderedAsSeparator == input.IsRenderedAsSeparator ||
                    (this.IsRenderedAsSeparator != null &&
                    this.IsRenderedAsSeparator.Equals(input.IsRenderedAsSeparator))
                ) && 
                (
                    this.Liked == input.Liked ||
                    (this.Liked != null &&
                    this.Liked.Equals(input.Liked))
                ) && 
                (
                    this.Likes == input.Likes ||
                    this.Likes != null &&
                    input.Likes != null &&
                    this.Likes.SequenceEqual(input.Likes)
                ) && 
                (
                    this.Memberships == input.Memberships ||
                    this.Memberships != null &&
                    input.Memberships != null &&
                    this.Memberships.SequenceEqual(input.Memberships)
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.NumHearts == input.NumHearts ||
                    (this.NumHearts != null &&
                    this.NumHearts.Equals(input.NumHearts))
                ) && 
                (
                    this.NumLikes == input.NumLikes ||
                    (this.NumLikes != null &&
                    this.NumLikes.Equals(input.NumLikes))
                ) && 
                (
                    this.NumSubtasks == input.NumSubtasks ||
                    (this.NumSubtasks != null &&
                    this.NumSubtasks.Equals(input.NumSubtasks))
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    (this.StartAt != null &&
                    this.StartAt.Equals(input.StartAt))
                ) && 
                (
                    this.StartOn == input.StartOn ||
                    (this.StartOn != null &&
                    this.StartOn.Equals(input.StartOn))
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.AssigneeSection == input.AssigneeSection ||
                    (this.AssigneeSection != null &&
                    this.AssigneeSection.Equals(input.AssigneeSection))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Followers == input.Followers ||
                    this.Followers != null &&
                    input.Followers != null &&
                    this.Followers.SequenceEqual(input.Followers)
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Projects == input.Projects ||
                    this.Projects != null &&
                    input.Projects != null &&
                    this.Projects.SequenceEqual(input.Projects)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Workspace == input.Workspace ||
                    (this.Workspace != null &&
                    this.Workspace.Equals(input.Workspace))
                ) && 
                (
                    this.PermalinkUrl == input.PermalinkUrl ||
                    (this.PermalinkUrl != null &&
                    this.PermalinkUrl.Equals(input.PermalinkUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gid != null)
                    hashCode = hashCode * 59 + this.Gid.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResourceSubtype != null)
                    hashCode = hashCode * 59 + this.ResourceSubtype.GetHashCode();
                if (this.ApprovalStatus != null)
                    hashCode = hashCode * 59 + this.ApprovalStatus.GetHashCode();
                if (this.AssigneeStatus != null)
                    hashCode = hashCode * 59 + this.AssigneeStatus.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.CompletedBy != null)
                    hashCode = hashCode * 59 + this.CompletedBy.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Dependencies != null)
                    hashCode = hashCode * 59 + this.Dependencies.GetHashCode();
                if (this.Dependents != null)
                    hashCode = hashCode * 59 + this.Dependents.GetHashCode();
                if (this.DueAt != null)
                    hashCode = hashCode * 59 + this.DueAt.GetHashCode();
                if (this.DueOn != null)
                    hashCode = hashCode * 59 + this.DueOn.GetHashCode();
                if (this.External != null)
                    hashCode = hashCode * 59 + this.External.GetHashCode();
                if (this.HtmlNotes != null)
                    hashCode = hashCode * 59 + this.HtmlNotes.GetHashCode();
                if (this.Hearted != null)
                    hashCode = hashCode * 59 + this.Hearted.GetHashCode();
                if (this.Hearts != null)
                    hashCode = hashCode * 59 + this.Hearts.GetHashCode();
                if (this.IsRenderedAsSeparator != null)
                    hashCode = hashCode * 59 + this.IsRenderedAsSeparator.GetHashCode();
                if (this.Liked != null)
                    hashCode = hashCode * 59 + this.Liked.GetHashCode();
                if (this.Likes != null)
                    hashCode = hashCode * 59 + this.Likes.GetHashCode();
                if (this.Memberships != null)
                    hashCode = hashCode * 59 + this.Memberships.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.NumHearts != null)
                    hashCode = hashCode * 59 + this.NumHearts.GetHashCode();
                if (this.NumLikes != null)
                    hashCode = hashCode * 59 + this.NumLikes.GetHashCode();
                if (this.NumSubtasks != null)
                    hashCode = hashCode * 59 + this.NumSubtasks.GetHashCode();
                if (this.StartAt != null)
                    hashCode = hashCode * 59 + this.StartAt.GetHashCode();
                if (this.StartOn != null)
                    hashCode = hashCode * 59 + this.StartOn.GetHashCode();
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.AssigneeSection != null)
                    hashCode = hashCode * 59 + this.AssigneeSection.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Followers != null)
                    hashCode = hashCode * 59 + this.Followers.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.Projects != null)
                    hashCode = hashCode * 59 + this.Projects.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Workspace != null)
                    hashCode = hashCode * 59 + this.Workspace.GetHashCode();
                if (this.PermalinkUrl != null)
                    hashCode = hashCode * 59 + this.PermalinkUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
