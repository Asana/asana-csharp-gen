/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// StoryBase
    /// </summary>
    [DataContract]
    public partial class StoryBase :  IEquatable<StoryBase>, IValidatableObject
    {
        /// <summary>
        /// The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StickerNameEnum
        {
            /// <summary>
            /// Enum Greencheckmark for value: green_checkmark
            /// </summary>
            [EnumMember(Value = "green_checkmark")]
            Greencheckmark = 1,

            /// <summary>
            /// Enum Peopledancing for value: people_dancing
            /// </summary>
            [EnumMember(Value = "people_dancing")]
            Peopledancing = 2,

            /// <summary>
            /// Enum Dancingunicorn for value: dancing_unicorn
            /// </summary>
            [EnumMember(Value = "dancing_unicorn")]
            Dancingunicorn = 3,

            /// <summary>
            /// Enum Heart for value: heart
            /// </summary>
            [EnumMember(Value = "heart")]
            Heart = 4,

            /// <summary>
            /// Enum Partypopper for value: party_popper
            /// </summary>
            [EnumMember(Value = "party_popper")]
            Partypopper = 5,

            /// <summary>
            /// Enum Peoplewavingflags for value: people_waving_flags
            /// </summary>
            [EnumMember(Value = "people_waving_flags")]
            Peoplewavingflags = 6,

            /// <summary>
            /// Enum Splashingnarwhal for value: splashing_narwhal
            /// </summary>
            [EnumMember(Value = "splashing_narwhal")]
            Splashingnarwhal = 7,

            /// <summary>
            /// Enum Trophy for value: trophy
            /// </summary>
            [EnumMember(Value = "trophy")]
            Trophy = 8,

            /// <summary>
            /// Enum Yetiridingunicorn for value: yeti_riding_unicorn
            /// </summary>
            [EnumMember(Value = "yeti_riding_unicorn")]
            Yetiridingunicorn = 9,

            /// <summary>
            /// Enum Celebratingpeople for value: celebrating_people
            /// </summary>
            [EnumMember(Value = "celebrating_people")]
            Celebratingpeople = 10,

            /// <summary>
            /// Enum Determinedclimbers for value: determined_climbers
            /// </summary>
            [EnumMember(Value = "determined_climbers")]
            Determinedclimbers = 11,

            /// <summary>
            /// Enum Phoenixspreadinglove for value: phoenix_spreading_love
            /// </summary>
            [EnumMember(Value = "phoenix_spreading_love")]
            Phoenixspreadinglove = 12

        }

        /// <summary>
        /// The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.</value>
        [DataMember(Name="sticker_name", EmitDefaultValue=false)]
        public StickerNameEnum? StickerName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoryBase" /> class.
        /// </summary>
        /// <param name="text">The plain text of the comment to add. Cannot be used with html_text..</param>
        /// <param name="htmlText">[Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator..</param>
        /// <param name="isPinned">*Conditional*. Whether the story should be pinned on the resource..</param>
        /// <param name="stickerName">The name of the sticker in this story. &#x60;null&#x60; if there is no sticker..</param>
        public StoryBase(string text = default(string), string htmlText = default(string), bool isPinned = default(bool), StickerNameEnum? stickerName = default(StickerNameEnum?))
        {
            this.Text = text;
            this.HtmlText = htmlText;
            this.IsPinned = isPinned;
            this.StickerName = stickerName;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; private set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public string ResourceSubtype { get; private set; }

        /// <summary>
        /// The plain text of the comment to add. Cannot be used with html_text.
        /// </summary>
        /// <value>The plain text of the comment to add. Cannot be used with html_text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.</value>
        [DataMember(Name="html_text", EmitDefaultValue=false)]
        public string HtmlText { get; set; }

        /// <summary>
        /// *Conditional*. Whether the story should be pinned on the resource.
        /// </summary>
        /// <value>*Conditional*. Whether the story should be pinned on the resource.</value>
        [DataMember(Name="is_pinned", EmitDefaultValue=false)]
        public bool IsPinned { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoryBase {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  IsPinned: ").Append(IsPinned).Append("\n");
            sb.Append("  StickerName: ").Append(StickerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoryBase);
        }

        /// <summary>
        /// Returns true if StoryBase instances are equal
        /// </summary>
        /// <param name="input">Instance of StoryBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoryBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gid == input.Gid ||
                    (this.Gid != null &&
                    this.Gid.Equals(input.Gid))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ResourceSubtype == input.ResourceSubtype ||
                    (this.ResourceSubtype != null &&
                    this.ResourceSubtype.Equals(input.ResourceSubtype))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.HtmlText == input.HtmlText ||
                    (this.HtmlText != null &&
                    this.HtmlText.Equals(input.HtmlText))
                ) && 
                (
                    this.IsPinned == input.IsPinned ||
                    (this.IsPinned != null &&
                    this.IsPinned.Equals(input.IsPinned))
                ) && 
                (
                    this.StickerName == input.StickerName ||
                    (this.StickerName != null &&
                    this.StickerName.Equals(input.StickerName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gid != null)
                    hashCode = hashCode * 59 + this.Gid.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ResourceSubtype != null)
                    hashCode = hashCode * 59 + this.ResourceSubtype.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.HtmlText != null)
                    hashCode = hashCode * 59 + this.HtmlText.GetHashCode();
                if (this.IsPinned != null)
                    hashCode = hashCode * 59 + this.IsPinned.GetHashCode();
                if (this.StickerName != null)
                    hashCode = hashCode * 59 + this.StickerName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
