/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// PortfolioResponseAllOf
    /// </summary>
    [DataContract]
    public partial class PortfolioResponseAllOf :  IEquatable<PortfolioResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioResponseAllOf" /> class.
        /// </summary>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="customFieldSettings">Array of custom field settings applied to the portfolio..</param>
        /// <param name="currentStatusUpdate">The latest &#x60;status_update&#x60; posted to this portfolio..</param>
        /// <param name="dueOn">The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD..</param>
        /// <param name="customFields">Array of Custom Fields..</param>
        /// <param name="owner">owner.</param>
        /// <param name="startOn">The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*.</param>
        /// <param name="workspace">workspace.</param>
        /// <param name="_public">True if the portfolio is public to its workspace members..</param>
        public PortfolioResponseAllOf(UserCompact createdBy = default(UserCompact), List<CustomFieldSettingResponse> customFieldSettings = default(List<CustomFieldSettingResponse>), StatusUpdateCompact currentStatusUpdate = default(StatusUpdateCompact), DateTime? dueOn = default(DateTime?), List<CustomFieldCompact> customFields = default(List<CustomFieldCompact>), UserCompact owner = default(UserCompact), DateTime? startOn = default(DateTime?), WorkspaceCompact workspace = default(WorkspaceCompact), bool _public = default(bool))
        {
            this.CurrentStatusUpdate = currentStatusUpdate;
            this.DueOn = dueOn;
            this.StartOn = startOn;
            this.CreatedBy = createdBy;
            this.CustomFieldSettings = customFieldSettings;
            this.CurrentStatusUpdate = currentStatusUpdate;
            this.DueOn = dueOn;
            this.CustomFields = customFields;
            this.Owner = owner;
            this.StartOn = startOn;
            this.Workspace = workspace;
            this.Public = _public;
        }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public UserCompact CreatedBy { get; set; }

        /// <summary>
        /// Array of custom field settings applied to the portfolio.
        /// </summary>
        /// <value>Array of custom field settings applied to the portfolio.</value>
        [DataMember(Name="custom_field_settings", EmitDefaultValue=false)]
        public List<CustomFieldSettingResponse> CustomFieldSettings { get; set; }

        /// <summary>
        /// The latest &#x60;status_update&#x60; posted to this portfolio.
        /// </summary>
        /// <value>The latest &#x60;status_update&#x60; posted to this portfolio.</value>
        [DataMember(Name="current_status_update", EmitDefaultValue=true)]
        public StatusUpdateCompact CurrentStatusUpdate { get; set; }

        /// <summary>
        /// The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
        /// </summary>
        /// <value>The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.</value>
        [DataMember(Name="due_on", EmitDefaultValue=true)]
        public DateTime? DueOn { get; set; }

        /// <summary>
        /// Array of Custom Fields.
        /// </summary>
        /// <value>Array of Custom Fields.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public List<CustomFieldCompact> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<UserCompact> Members { get; private set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public UserCompact Owner { get; set; }

        /// <summary>
        /// The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*
        /// </summary>
        /// <value>The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*</value>
        [DataMember(Name="start_on", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartOn { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public WorkspaceCompact Workspace { get; set; }

        /// <summary>
        /// A url that points directly to the object within Asana.
        /// </summary>
        /// <value>A url that points directly to the object within Asana.</value>
        [DataMember(Name="permalink_url", EmitDefaultValue=false)]
        public string PermalinkUrl { get; private set; }

        /// <summary>
        /// True if the portfolio is public to its workspace members.
        /// </summary>
        /// <value>True if the portfolio is public to its workspace members.</value>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool Public { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortfolioResponseAllOf {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CustomFieldSettings: ").Append(CustomFieldSettings).Append("\n");
            sb.Append("  CurrentStatusUpdate: ").Append(CurrentStatusUpdate).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  PermalinkUrl: ").Append(PermalinkUrl).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioResponseAllOf);
        }

        /// <summary>
        /// Returns true if PortfolioResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CustomFieldSettings == input.CustomFieldSettings ||
                    this.CustomFieldSettings != null &&
                    input.CustomFieldSettings != null &&
                    this.CustomFieldSettings.SequenceEqual(input.CustomFieldSettings)
                ) && 
                (
                    this.CurrentStatusUpdate == input.CurrentStatusUpdate ||
                    (this.CurrentStatusUpdate != null &&
                    this.CurrentStatusUpdate.Equals(input.CurrentStatusUpdate))
                ) && 
                (
                    this.DueOn == input.DueOn ||
                    (this.DueOn != null &&
                    this.DueOn.Equals(input.DueOn))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.StartOn == input.StartOn ||
                    (this.StartOn != null &&
                    this.StartOn.Equals(input.StartOn))
                ) && 
                (
                    this.Workspace == input.Workspace ||
                    (this.Workspace != null &&
                    this.Workspace.Equals(input.Workspace))
                ) && 
                (
                    this.PermalinkUrl == input.PermalinkUrl ||
                    (this.PermalinkUrl != null &&
                    this.PermalinkUrl.Equals(input.PermalinkUrl))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CustomFieldSettings != null)
                    hashCode = hashCode * 59 + this.CustomFieldSettings.GetHashCode();
                if (this.CurrentStatusUpdate != null)
                    hashCode = hashCode * 59 + this.CurrentStatusUpdate.GetHashCode();
                if (this.DueOn != null)
                    hashCode = hashCode * 59 + this.DueOn.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.StartOn != null)
                    hashCode = hashCode * 59 + this.StartOn.GetHashCode();
                if (this.Workspace != null)
                    hashCode = hashCode * 59 + this.Workspace.GetHashCode();
                if (this.PermalinkUrl != null)
                    hashCode = hashCode * 59 + this.PermalinkUrl.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
