/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// ProjectResponseAllOf
    /// </summary>
    [DataContract]
    public partial class ProjectResponseAllOf :  IEquatable<ProjectResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// The icon for a project.
        /// </summary>
        /// <value>The icon for a project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IconEnum
        {
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 1,

            /// <summary>
            /// Enum Board for value: board
            /// </summary>
            [EnumMember(Value = "board")]
            Board = 2,

            /// <summary>
            /// Enum Timeline for value: timeline
            /// </summary>
            [EnumMember(Value = "timeline")]
            Timeline = 3,

            /// <summary>
            /// Enum Calendar for value: calendar
            /// </summary>
            [EnumMember(Value = "calendar")]
            Calendar = 4,

            /// <summary>
            /// Enum Rocket for value: rocket
            /// </summary>
            [EnumMember(Value = "rocket")]
            Rocket = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6,

            /// <summary>
            /// Enum Graph for value: graph
            /// </summary>
            [EnumMember(Value = "graph")]
            Graph = 7,

            /// <summary>
            /// Enum Star for value: star
            /// </summary>
            [EnumMember(Value = "star")]
            Star = 8,

            /// <summary>
            /// Enum Bug for value: bug
            /// </summary>
            [EnumMember(Value = "bug")]
            Bug = 9,

            /// <summary>
            /// Enum Lightbulb for value: light_bulb
            /// </summary>
            [EnumMember(Value = "light_bulb")]
            Lightbulb = 10,

            /// <summary>
            /// Enum Globe for value: globe
            /// </summary>
            [EnumMember(Value = "globe")]
            Globe = 11,

            /// <summary>
            /// Enum Gear for value: gear
            /// </summary>
            [EnumMember(Value = "gear")]
            Gear = 12,

            /// <summary>
            /// Enum Notebook for value: notebook
            /// </summary>
            [EnumMember(Value = "notebook")]
            Notebook = 13,

            /// <summary>
            /// Enum Computer for value: computer
            /// </summary>
            [EnumMember(Value = "computer")]
            Computer = 14,

            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")]
            Check = 15,

            /// <summary>
            /// Enum Target for value: target
            /// </summary>
            [EnumMember(Value = "target")]
            Target = 16,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 17,

            /// <summary>
            /// Enum Megaphone for value: megaphone
            /// </summary>
            [EnumMember(Value = "megaphone")]
            Megaphone = 18,

            /// <summary>
            /// Enum Chatbubbles for value: chat_bubbles
            /// </summary>
            [EnumMember(Value = "chat_bubbles")]
            Chatbubbles = 19,

            /// <summary>
            /// Enum Briefcase for value: briefcase
            /// </summary>
            [EnumMember(Value = "briefcase")]
            Briefcase = 20,

            /// <summary>
            /// Enum Pagelayout for value: page_layout
            /// </summary>
            [EnumMember(Value = "page_layout")]
            Pagelayout = 21,

            /// <summary>
            /// Enum Mountainflag for value: mountain_flag
            /// </summary>
            [EnumMember(Value = "mountain_flag")]
            Mountainflag = 22,

            /// <summary>
            /// Enum Puzzle for value: puzzle
            /// </summary>
            [EnumMember(Value = "puzzle")]
            Puzzle = 23,

            /// <summary>
            /// Enum Presentation for value: presentation
            /// </summary>
            [EnumMember(Value = "presentation")]
            Presentation = 24,

            /// <summary>
            /// Enum Lineandsymbols for value: line_and_symbols
            /// </summary>
            [EnumMember(Value = "line_and_symbols")]
            Lineandsymbols = 25,

            /// <summary>
            /// Enum Speeddial for value: speed_dial
            /// </summary>
            [EnumMember(Value = "speed_dial")]
            Speeddial = 26,

            /// <summary>
            /// Enum Ribbon for value: ribbon
            /// </summary>
            [EnumMember(Value = "ribbon")]
            Ribbon = 27,

            /// <summary>
            /// Enum Shoe for value: shoe
            /// </summary>
            [EnumMember(Value = "shoe")]
            Shoe = 28,

            /// <summary>
            /// Enum Shoppingbasket for value: shopping_basket
            /// </summary>
            [EnumMember(Value = "shopping_basket")]
            Shoppingbasket = 29,

            /// <summary>
            /// Enum Map for value: map
            /// </summary>
            [EnumMember(Value = "map")]
            Map = 30,

            /// <summary>
            /// Enum Ticket for value: ticket
            /// </summary>
            [EnumMember(Value = "ticket")]
            Ticket = 31,

            /// <summary>
            /// Enum Coins for value: coins
            /// </summary>
            [EnumMember(Value = "coins")]
            Coins = 32

        }

        /// <summary>
        /// The icon for a project.
        /// </summary>
        /// <value>The icon for a project.</value>
        [DataMember(Name="icon", EmitDefaultValue=true)]
        public IconEnum? Icon { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectResponseAllOf" /> class.
        /// </summary>
        /// <param name="completedBy">completedBy.</param>
        /// <param name="owner">The current owner of the project, may be null..</param>
        /// <param name="team">team.</param>
        /// <param name="icon">The icon for a project..</param>
        /// <param name="projectBrief">projectBrief.</param>
        /// <param name="createdFromTemplate">createdFromTemplate.</param>
        public ProjectResponseAllOf(UserCompact completedBy = default(UserCompact), UserCompact owner = default(UserCompact), TeamCompact team = default(TeamCompact), IconEnum? icon = default(IconEnum?), ProjectBriefCompact projectBrief = default(ProjectBriefCompact), ProjectTemplateCompact createdFromTemplate = default(ProjectTemplateCompact))
        {
            this.Owner = owner;
            this.Icon = icon;
            this.CompletedBy = completedBy;
            this.Owner = owner;
            this.Team = team;
            this.Icon = icon;
            this.ProjectBrief = projectBrief;
            this.CreatedFromTemplate = createdFromTemplate;
        }

        /// <summary>
        /// Array of Custom Fields.
        /// </summary>
        /// <value>Array of Custom Fields.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public List<CustomFieldCompact> CustomFields { get; private set; }

        /// <summary>
        /// True if the project is currently marked complete, false if not.
        /// </summary>
        /// <value>True if the project is currently marked complete, false if not.</value>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public bool Completed { get; private set; }

        /// <summary>
        /// The time at which this project was completed, or null if the project is not completed.
        /// </summary>
        /// <value>The time at which this project was completed, or null if the project is not completed.</value>
        [DataMember(Name="completed_at", EmitDefaultValue=true)]
        public DateTime? CompletedAt { get; private set; }

        /// <summary>
        /// Gets or Sets CompletedBy
        /// </summary>
        [DataMember(Name="completed_by", EmitDefaultValue=false)]
        public UserCompact CompletedBy { get; set; }

        /// <summary>
        /// Array of users following this project. Followers are a subset of members who have opted in to receive \&quot;tasks added\&quot; notifications for a project.
        /// </summary>
        /// <value>Array of users following this project. Followers are a subset of members who have opted in to receive \&quot;tasks added\&quot; notifications for a project.</value>
        [DataMember(Name="followers", EmitDefaultValue=false)]
        public List<UserCompact> Followers { get; private set; }

        /// <summary>
        /// The current owner of the project, may be null.
        /// </summary>
        /// <value>The current owner of the project, may be null.</value>
        [DataMember(Name="owner", EmitDefaultValue=true)]
        public UserCompact Owner { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public TeamCompact Team { get; set; }


        /// <summary>
        /// A url that points directly to the object within Asana.
        /// </summary>
        /// <value>A url that points directly to the object within Asana.</value>
        [DataMember(Name="permalink_url", EmitDefaultValue=false)]
        public string PermalinkUrl { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectBrief
        /// </summary>
        [DataMember(Name="project_brief", EmitDefaultValue=false)]
        public ProjectBriefCompact ProjectBrief { get; set; }

        /// <summary>
        /// Gets or Sets CreatedFromTemplate
        /// </summary>
        [DataMember(Name="created_from_template", EmitDefaultValue=false)]
        public ProjectTemplateCompact CreatedFromTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectResponseAllOf {\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CompletedBy: ").Append(CompletedBy).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  PermalinkUrl: ").Append(PermalinkUrl).Append("\n");
            sb.Append("  ProjectBrief: ").Append(ProjectBrief).Append("\n");
            sb.Append("  CreatedFromTemplate: ").Append(CreatedFromTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectResponseAllOf);
        }

        /// <summary>
        /// Returns true if ProjectResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.CompletedBy == input.CompletedBy ||
                    (this.CompletedBy != null &&
                    this.CompletedBy.Equals(input.CompletedBy))
                ) && 
                (
                    this.Followers == input.Followers ||
                    this.Followers != null &&
                    input.Followers != null &&
                    this.Followers.SequenceEqual(input.Followers)
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.PermalinkUrl == input.PermalinkUrl ||
                    (this.PermalinkUrl != null &&
                    this.PermalinkUrl.Equals(input.PermalinkUrl))
                ) && 
                (
                    this.ProjectBrief == input.ProjectBrief ||
                    (this.ProjectBrief != null &&
                    this.ProjectBrief.Equals(input.ProjectBrief))
                ) && 
                (
                    this.CreatedFromTemplate == input.CreatedFromTemplate ||
                    (this.CreatedFromTemplate != null &&
                    this.CreatedFromTemplate.Equals(input.CreatedFromTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.CompletedBy != null)
                    hashCode = hashCode * 59 + this.CompletedBy.GetHashCode();
                if (this.Followers != null)
                    hashCode = hashCode * 59 + this.Followers.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.PermalinkUrl != null)
                    hashCode = hashCode * 59 + this.PermalinkUrl.GetHashCode();
                if (this.ProjectBrief != null)
                    hashCode = hashCode * 59 + this.ProjectBrief.GetHashCode();
                if (this.CreatedFromTemplate != null)
                    hashCode = hashCode * 59 + this.CreatedFromTemplate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
