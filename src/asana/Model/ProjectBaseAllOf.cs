/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// ProjectBaseAllOf
    /// </summary>
    [DataContract]
    public partial class ProjectBaseAllOf :  IEquatable<ProjectBaseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Color of the project.
        /// </summary>
        /// <value>Color of the project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            /// <summary>
            /// Enum DarkPink for value: dark-pink
            /// </summary>
            [EnumMember(Value = "dark-pink")]
            DarkPink = 1,

            /// <summary>
            /// Enum DarkGreen for value: dark-green
            /// </summary>
            [EnumMember(Value = "dark-green")]
            DarkGreen = 2,

            /// <summary>
            /// Enum DarkBlue for value: dark-blue
            /// </summary>
            [EnumMember(Value = "dark-blue")]
            DarkBlue = 3,

            /// <summary>
            /// Enum DarkRed for value: dark-red
            /// </summary>
            [EnumMember(Value = "dark-red")]
            DarkRed = 4,

            /// <summary>
            /// Enum DarkTeal for value: dark-teal
            /// </summary>
            [EnumMember(Value = "dark-teal")]
            DarkTeal = 5,

            /// <summary>
            /// Enum DarkBrown for value: dark-brown
            /// </summary>
            [EnumMember(Value = "dark-brown")]
            DarkBrown = 6,

            /// <summary>
            /// Enum DarkOrange for value: dark-orange
            /// </summary>
            [EnumMember(Value = "dark-orange")]
            DarkOrange = 7,

            /// <summary>
            /// Enum DarkPurple for value: dark-purple
            /// </summary>
            [EnumMember(Value = "dark-purple")]
            DarkPurple = 8,

            /// <summary>
            /// Enum DarkWarmGray for value: dark-warm-gray
            /// </summary>
            [EnumMember(Value = "dark-warm-gray")]
            DarkWarmGray = 9,

            /// <summary>
            /// Enum LightPink for value: light-pink
            /// </summary>
            [EnumMember(Value = "light-pink")]
            LightPink = 10,

            /// <summary>
            /// Enum LightGreen for value: light-green
            /// </summary>
            [EnumMember(Value = "light-green")]
            LightGreen = 11,

            /// <summary>
            /// Enum LightBlue for value: light-blue
            /// </summary>
            [EnumMember(Value = "light-blue")]
            LightBlue = 12,

            /// <summary>
            /// Enum LightRed for value: light-red
            /// </summary>
            [EnumMember(Value = "light-red")]
            LightRed = 13,

            /// <summary>
            /// Enum LightTeal for value: light-teal
            /// </summary>
            [EnumMember(Value = "light-teal")]
            LightTeal = 14,

            /// <summary>
            /// Enum LightBrown for value: light-brown
            /// </summary>
            [EnumMember(Value = "light-brown")]
            LightBrown = 15,

            /// <summary>
            /// Enum LightOrange for value: light-orange
            /// </summary>
            [EnumMember(Value = "light-orange")]
            LightOrange = 16,

            /// <summary>
            /// Enum LightPurple for value: light-purple
            /// </summary>
            [EnumMember(Value = "light-purple")]
            LightPurple = 17,

            /// <summary>
            /// Enum LightWarmGray for value: light-warm-gray
            /// </summary>
            [EnumMember(Value = "light-warm-gray")]
            LightWarmGray = 18

        }

        /// <summary>
        /// Color of the project.
        /// </summary>
        /// <value>Color of the project.</value>
        [DataMember(Name="color", EmitDefaultValue=true)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// The default view (list, board, calendar, or timeline) of a project.
        /// </summary>
        /// <value>The default view (list, board, calendar, or timeline) of a project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultViewEnum
        {
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 1,

            /// <summary>
            /// Enum Board for value: board
            /// </summary>
            [EnumMember(Value = "board")]
            Board = 2,

            /// <summary>
            /// Enum Calendar for value: calendar
            /// </summary>
            [EnumMember(Value = "calendar")]
            Calendar = 3,

            /// <summary>
            /// Enum Timeline for value: timeline
            /// </summary>
            [EnumMember(Value = "timeline")]
            Timeline = 4

        }

        /// <summary>
        /// The default view (list, board, calendar, or timeline) of a project.
        /// </summary>
        /// <value>The default view (list, board, calendar, or timeline) of a project.</value>
        [DataMember(Name="default_view", EmitDefaultValue=false)]
        public DefaultViewEnum? DefaultView { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectBaseAllOf" /> class.
        /// </summary>
        /// <param name="archived">True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries..</param>
        /// <param name="color">Color of the project..</param>
        /// <param name="currentStatus">*Deprecated: new integrations should prefer the &#x60;current_status_update&#x60; resource.*.</param>
        /// <param name="currentStatusUpdate">The latest &#x60;status_update&#x60; posted to this project..</param>
        /// <param name="defaultView">The default view (list, board, calendar, or timeline) of a project..</param>
        /// <param name="dueDate">*Deprecated: new integrations should prefer the &#x60;due_on&#x60; field.*.</param>
        /// <param name="dueOn">The day on which this project is due. This takes a date with format YYYY-MM-DD..</param>
        /// <param name="htmlNotes">[Opt In](/docs/input-output-options). The notes of the project with formatting as HTML..</param>
        /// <param name="isTemplate">[Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template..</param>
        /// <param name="notes">Free-form textual information associated with the project (ie., its description)..</param>
        /// <param name="_public">True if the project is public to its team..</param>
        /// <param name="startOn">The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*.</param>
        /// <param name="workspace">workspace.</param>
        public ProjectBaseAllOf(bool archived = default(bool), ColorEnum? color = default(ColorEnum?), ProjectStatusResponse currentStatus = default(ProjectStatusResponse), StatusUpdateCompact currentStatusUpdate = default(StatusUpdateCompact), DefaultViewEnum? defaultView = default(DefaultViewEnum?), DateTime? dueDate = default(DateTime?), DateTime? dueOn = default(DateTime?), string htmlNotes = default(string), bool isTemplate = default(bool), string notes = default(string), bool _public = default(bool), DateTime? startOn = default(DateTime?), WorkspaceCompact workspace = default(WorkspaceCompact))
        {
            this.Color = color;
            this.CurrentStatus = currentStatus;
            this.CurrentStatusUpdate = currentStatusUpdate;
            this.DueDate = dueDate;
            this.DueOn = dueOn;
            this.StartOn = startOn;
            this.Archived = archived;
            this.Color = color;
            this.CurrentStatus = currentStatus;
            this.CurrentStatusUpdate = currentStatusUpdate;
            this.DefaultView = defaultView;
            this.DueDate = dueDate;
            this.DueOn = dueOn;
            this.HtmlNotes = htmlNotes;
            this.IsTemplate = isTemplate;
            this.Notes = notes;
            this.Public = _public;
            this.StartOn = startOn;
            this.Workspace = workspace;
        }

        /// <summary>
        /// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
        /// </summary>
        /// <value>True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.</value>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool Archived { get; set; }


        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// *Deprecated: new integrations should prefer the &#x60;current_status_update&#x60; resource.*
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the &#x60;current_status_update&#x60; resource.*</value>
        [DataMember(Name="current_status", EmitDefaultValue=true)]
        public ProjectStatusResponse CurrentStatus { get; set; }

        /// <summary>
        /// The latest &#x60;status_update&#x60; posted to this project.
        /// </summary>
        /// <value>The latest &#x60;status_update&#x60; posted to this project.</value>
        [DataMember(Name="current_status_update", EmitDefaultValue=true)]
        public StatusUpdateCompact CurrentStatusUpdate { get; set; }

        /// <summary>
        /// Array of Custom Field Settings (in compact form).
        /// </summary>
        /// <value>Array of Custom Field Settings (in compact form).</value>
        [DataMember(Name="custom_field_settings", EmitDefaultValue=false)]
        public List<CustomFieldSettingResponse> CustomFieldSettings { get; private set; }


        /// <summary>
        /// *Deprecated: new integrations should prefer the &#x60;due_on&#x60; field.*
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the &#x60;due_on&#x60; field.*</value>
        [DataMember(Name="due_date", EmitDefaultValue=true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The day on which this project is due. This takes a date with format YYYY-MM-DD.
        /// </summary>
        /// <value>The day on which this project is due. This takes a date with format YYYY-MM-DD.</value>
        [DataMember(Name="due_on", EmitDefaultValue=true)]
        public DateTime? DueOn { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.</value>
        [DataMember(Name="html_notes", EmitDefaultValue=false)]
        public string HtmlNotes { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.</value>
        [DataMember(Name="is_template", EmitDefaultValue=false)]
        public bool IsTemplate { get; set; }

        /// <summary>
        /// Array of users who are members of this project.
        /// </summary>
        /// <value>Array of users who are members of this project.</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<UserCompact> Members { get; private set; }

        /// <summary>
        /// The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
        /// </summary>
        /// <value>The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*</value>
        [DataMember(Name="modified_at", EmitDefaultValue=false)]
        public DateTime ModifiedAt { get; private set; }

        /// <summary>
        /// Free-form textual information associated with the project (ie., its description).
        /// </summary>
        /// <value>Free-form textual information associated with the project (ie., its description).</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// True if the project is public to its team.
        /// </summary>
        /// <value>True if the project is public to its team.</value>
        [DataMember(Name="public", EmitDefaultValue=false)]
        public bool Public { get; set; }

        /// <summary>
        /// The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*
        /// </summary>
        /// <value>The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*</value>
        [DataMember(Name="start_on", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartOn { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public WorkspaceCompact Workspace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectBaseAllOf {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  CurrentStatusUpdate: ").Append(CurrentStatusUpdate).Append("\n");
            sb.Append("  CustomFieldSettings: ").Append(CustomFieldSettings).Append("\n");
            sb.Append("  DefaultView: ").Append(DefaultView).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  HtmlNotes: ").Append(HtmlNotes).Append("\n");
            sb.Append("  IsTemplate: ").Append(IsTemplate).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectBaseAllOf);
        }

        /// <summary>
        /// Returns true if ProjectBaseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectBaseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectBaseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CurrentStatus == input.CurrentStatus ||
                    (this.CurrentStatus != null &&
                    this.CurrentStatus.Equals(input.CurrentStatus))
                ) && 
                (
                    this.CurrentStatusUpdate == input.CurrentStatusUpdate ||
                    (this.CurrentStatusUpdate != null &&
                    this.CurrentStatusUpdate.Equals(input.CurrentStatusUpdate))
                ) && 
                (
                    this.CustomFieldSettings == input.CustomFieldSettings ||
                    this.CustomFieldSettings != null &&
                    input.CustomFieldSettings != null &&
                    this.CustomFieldSettings.SequenceEqual(input.CustomFieldSettings)
                ) && 
                (
                    this.DefaultView == input.DefaultView ||
                    (this.DefaultView != null &&
                    this.DefaultView.Equals(input.DefaultView))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.DueOn == input.DueOn ||
                    (this.DueOn != null &&
                    this.DueOn.Equals(input.DueOn))
                ) && 
                (
                    this.HtmlNotes == input.HtmlNotes ||
                    (this.HtmlNotes != null &&
                    this.HtmlNotes.Equals(input.HtmlNotes))
                ) && 
                (
                    this.IsTemplate == input.IsTemplate ||
                    (this.IsTemplate != null &&
                    this.IsTemplate.Equals(input.IsTemplate))
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.StartOn == input.StartOn ||
                    (this.StartOn != null &&
                    this.StartOn.Equals(input.StartOn))
                ) && 
                (
                    this.Workspace == input.Workspace ||
                    (this.Workspace != null &&
                    this.Workspace.Equals(input.Workspace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CurrentStatus != null)
                    hashCode = hashCode * 59 + this.CurrentStatus.GetHashCode();
                if (this.CurrentStatusUpdate != null)
                    hashCode = hashCode * 59 + this.CurrentStatusUpdate.GetHashCode();
                if (this.CustomFieldSettings != null)
                    hashCode = hashCode * 59 + this.CustomFieldSettings.GetHashCode();
                if (this.DefaultView != null)
                    hashCode = hashCode * 59 + this.DefaultView.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.DueOn != null)
                    hashCode = hashCode * 59 + this.DueOn.GetHashCode();
                if (this.HtmlNotes != null)
                    hashCode = hashCode * 59 + this.HtmlNotes.GetHashCode();
                if (this.IsTemplate != null)
                    hashCode = hashCode * 59 + this.IsTemplate.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.StartOn != null)
                    hashCode = hashCode * 59 + this.StartOn.GetHashCode();
                if (this.Workspace != null)
                    hashCode = hashCode * 59 + this.Workspace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
