/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// A collection of rich text that will be displayed as a preview to another app.  This is read-only except for a small group of whitelisted apps.
    /// </summary>
    [DataContract]
    public partial class Preview :  IEquatable<Preview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Preview" /> class.
        /// </summary>
        /// <param name="fallback">Some fallback text to display if unable to display the full preview..</param>
        /// <param name="footer">Text to display in the footer..</param>
        /// <param name="header">Text to display in the header..</param>
        /// <param name="headerLink">Where the header will link to..</param>
        /// <param name="htmlText">HTML formatted text for the body of the preview..</param>
        /// <param name="text">Text for the body of the preview..</param>
        /// <param name="title">Text to display as the title..</param>
        /// <param name="titleLink">Where to title will link to..</param>
        public Preview(string fallback = default(string), string footer = default(string), string header = default(string), string headerLink = default(string), string htmlText = default(string), string text = default(string), string title = default(string), string titleLink = default(string))
        {
            this.Fallback = fallback;
            this.Footer = footer;
            this.Header = header;
            this.HeaderLink = headerLink;
            this.HtmlText = htmlText;
            this.Text = text;
            this.Title = title;
            this.TitleLink = titleLink;
        }

        /// <summary>
        /// Some fallback text to display if unable to display the full preview.
        /// </summary>
        /// <value>Some fallback text to display if unable to display the full preview.</value>
        [DataMember(Name="fallback", EmitDefaultValue=false)]
        public string Fallback { get; set; }

        /// <summary>
        /// Text to display in the footer.
        /// </summary>
        /// <value>Text to display in the footer.</value>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public string Footer { get; set; }

        /// <summary>
        /// Text to display in the header.
        /// </summary>
        /// <value>Text to display in the header.</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// Where the header will link to.
        /// </summary>
        /// <value>Where the header will link to.</value>
        [DataMember(Name="header_link", EmitDefaultValue=false)]
        public string HeaderLink { get; set; }

        /// <summary>
        /// HTML formatted text for the body of the preview.
        /// </summary>
        /// <value>HTML formatted text for the body of the preview.</value>
        [DataMember(Name="html_text", EmitDefaultValue=false)]
        public string HtmlText { get; set; }

        /// <summary>
        /// Text for the body of the preview.
        /// </summary>
        /// <value>Text for the body of the preview.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Text to display as the title.
        /// </summary>
        /// <value>Text to display as the title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Where to title will link to.
        /// </summary>
        /// <value>Where to title will link to.</value>
        [DataMember(Name="title_link", EmitDefaultValue=false)]
        public string TitleLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Preview {\n");
            sb.Append("  Fallback: ").Append(Fallback).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  HeaderLink: ").Append(HeaderLink).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TitleLink: ").Append(TitleLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Preview);
        }

        /// <summary>
        /// Returns true if Preview instances are equal
        /// </summary>
        /// <param name="input">Instance of Preview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Preview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fallback == input.Fallback ||
                    (this.Fallback != null &&
                    this.Fallback.Equals(input.Fallback))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.HeaderLink == input.HeaderLink ||
                    (this.HeaderLink != null &&
                    this.HeaderLink.Equals(input.HeaderLink))
                ) && 
                (
                    this.HtmlText == input.HtmlText ||
                    (this.HtmlText != null &&
                    this.HtmlText.Equals(input.HtmlText))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TitleLink == input.TitleLink ||
                    (this.TitleLink != null &&
                    this.TitleLink.Equals(input.TitleLink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fallback != null)
                    hashCode = hashCode * 59 + this.Fallback.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.HeaderLink != null)
                    hashCode = hashCode * 59 + this.HeaderLink.GetHashCode();
                if (this.HtmlText != null)
                    hashCode = hashCode * 59 + this.HtmlText.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.TitleLink != null)
                    hashCode = hashCode * 59 + this.TitleLink.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
