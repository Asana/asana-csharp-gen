/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// ProjectMembershipResponseAllOf
    /// </summary>
    [DataContract]
    public partial class ProjectMembershipResponseAllOf :  IEquatable<ProjectMembershipResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Whether the user has full access to the project or has comment-only access.
        /// </summary>
        /// <value>Whether the user has full access to the project or has comment-only access.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WriteAccessEnum
        {
            /// <summary>
            /// Enum Fullwrite for value: full_write
            /// </summary>
            [EnumMember(Value = "full_write")]
            Fullwrite = 1,

            /// <summary>
            /// Enum Commentonly for value: comment_only
            /// </summary>
            [EnumMember(Value = "comment_only")]
            Commentonly = 2

        }

        /// <summary>
        /// Whether the user has full access to the project or has comment-only access.
        /// </summary>
        /// <value>Whether the user has full access to the project or has comment-only access.</value>
        [DataMember(Name="write_access", EmitDefaultValue=false)]
        public WriteAccessEnum? WriteAccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectMembershipResponseAllOf" /> class.
        /// </summary>
        /// <param name="project">project.</param>
        public ProjectMembershipResponseAllOf(ProjectCompact project = default(ProjectCompact))
        {
            this.Project = project;
        }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public ProjectCompact Project { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectMembershipResponseAllOf {\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  WriteAccess: ").Append(WriteAccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectMembershipResponseAllOf);
        }

        /// <summary>
        /// Returns true if ProjectMembershipResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectMembershipResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectMembershipResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.WriteAccess == input.WriteAccess ||
                    (this.WriteAccess != null &&
                    this.WriteAccess.Equals(input.WriteAccess))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.WriteAccess != null)
                    hashCode = hashCode * 59 + this.WriteAccess.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
