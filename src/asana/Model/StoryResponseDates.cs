/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// *Conditional*
    /// </summary>
    [DataContract]
    public partial class StoryResponseDates :  IEquatable<StoryResponseDates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoryResponseDates" /> class.
        /// </summary>
        /// <param name="startOn">startOn.</param>
        /// <param name="dueAt">dueAt.</param>
        /// <param name="dueOn">dueOn.</param>
        public StoryResponseDates(DateTime startOn = default(DateTime), DateTime dueAt = default(DateTime), DateTime dueOn = default(DateTime))
        {
            this.StartOn = startOn;
            this.DueAt = dueAt;
            this.DueOn = dueOn;
        }

        /// <summary>
        /// Gets or Sets StartOn
        /// </summary>
        [DataMember(Name="start_on", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartOn { get; set; }

        /// <summary>
        /// Gets or Sets DueAt
        /// </summary>
        [DataMember(Name="due_at", EmitDefaultValue=false)]
        public DateTime DueAt { get; set; }

        /// <summary>
        /// Gets or Sets DueOn
        /// </summary>
        [DataMember(Name="due_on", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DueOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoryResponseDates {\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  DueAt: ").Append(DueAt).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoryResponseDates);
        }

        /// <summary>
        /// Returns true if StoryResponseDates instances are equal
        /// </summary>
        /// <param name="input">Instance of StoryResponseDates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoryResponseDates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartOn == input.StartOn ||
                    (this.StartOn != null &&
                    this.StartOn.Equals(input.StartOn))
                ) && 
                (
                    this.DueAt == input.DueAt ||
                    (this.DueAt != null &&
                    this.DueAt.Equals(input.DueAt))
                ) && 
                (
                    this.DueOn == input.DueOn ||
                    (this.DueOn != null &&
                    this.DueOn.Equals(input.DueOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartOn != null)
                    hashCode = hashCode * 59 + this.StartOn.GetHashCode();
                if (this.DueAt != null)
                    hashCode = hashCode * 59 + this.DueAt.GetHashCode();
                if (this.DueOn != null)
                    hashCode = hashCode * 59 + this.DueOn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
