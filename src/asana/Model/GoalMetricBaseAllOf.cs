/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// GoalMetricBaseAllOf
    /// </summary>
    [DataContract]
    public partial class GoalMetricBaseAllOf :  IEquatable<GoalMetricBaseAllOf>, IValidatableObject
    {
        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 1

        }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }
        /// <summary>
        /// A supported unit of measure for the goal metric, or none.
        /// </summary>
        /// <value>A supported unit of measure for the goal metric, or none.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Currency for value: currency
            /// </summary>
            [EnumMember(Value = "currency")]
            Currency = 2,

            /// <summary>
            /// Enum Percentage for value: percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage = 3

        }

        /// <summary>
        /// A supported unit of measure for the goal metric, or none.
        /// </summary>
        /// <value>A supported unit of measure for the goal metric, or none.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum? Unit { get; set; }
        /// <summary>
        /// This field defines how the progress value of a goal metric is being calculated. A goal&#39;s progress can be provided manually by the user, or calculated automatically from contributing subgoals or projects.
        /// </summary>
        /// <value>This field defines how the progress value of a goal metric is being calculated. A goal&#39;s progress can be provided manually by the user, or calculated automatically from contributing subgoals or projects.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProgressSourceEnum
        {
            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 1,

            /// <summary>
            /// Enum Subgoalprogress for value: subgoal_progress
            /// </summary>
            [EnumMember(Value = "subgoal_progress")]
            Subgoalprogress = 2,

            /// <summary>
            /// Enum Projecttaskcompletion for value: project_task_completion
            /// </summary>
            [EnumMember(Value = "project_task_completion")]
            Projecttaskcompletion = 3,

            /// <summary>
            /// Enum Projectmilestonecompletion for value: project_milestone_completion
            /// </summary>
            [EnumMember(Value = "project_milestone_completion")]
            Projectmilestonecompletion = 4

        }

        /// <summary>
        /// This field defines how the progress value of a goal metric is being calculated. A goal&#39;s progress can be provided manually by the user, or calculated automatically from contributing subgoals or projects.
        /// </summary>
        /// <value>This field defines how the progress value of a goal metric is being calculated. A goal&#39;s progress can be provided manually by the user, or calculated automatically from contributing subgoals or projects.</value>
        [DataMember(Name="progress_source", EmitDefaultValue=false)]
        public ProgressSourceEnum? ProgressSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GoalMetricBaseAllOf" /> class.
        /// </summary>
        /// <param name="precision">*Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%..</param>
        /// <param name="unit">A supported unit of measure for the goal metric, or none..</param>
        /// <param name="currencyCode">ISO 4217 currency code to format this custom field. This will be null if the &#x60;unit&#x60; is not &#x60;currency&#x60;..</param>
        /// <param name="initialNumberValue">This number is the start value of a goal metric of type number..</param>
        /// <param name="targetNumberValue">This number is the end value of a goal metric of type number. This number cannot equal &#x60;initial_number_value&#x60;..</param>
        /// <param name="currentNumberValue">This number is the current value of a goal metric of type number..</param>
        /// <param name="progressSource">This field defines how the progress value of a goal metric is being calculated. A goal&#39;s progress can be provided manually by the user, or calculated automatically from contributing subgoals or projects..</param>
        public GoalMetricBaseAllOf(int precision = default(int), UnitEnum? unit = default(UnitEnum?), string currencyCode = default(string), decimal initialNumberValue = default(decimal), decimal targetNumberValue = default(decimal), decimal currentNumberValue = default(decimal), ProgressSourceEnum? progressSource = default(ProgressSourceEnum?))
        {
            this.CurrencyCode = currencyCode;
            this.Precision = precision;
            this.Unit = unit;
            this.CurrencyCode = currencyCode;
            this.InitialNumberValue = initialNumberValue;
            this.TargetNumberValue = targetNumberValue;
            this.CurrentNumberValue = currentNumberValue;
            this.ProgressSource = progressSource;
        }


        /// <summary>
        /// *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
        /// </summary>
        /// <value>*Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.</value>
        [DataMember(Name="precision", EmitDefaultValue=false)]
        public int Precision { get; set; }


        /// <summary>
        /// ISO 4217 currency code to format this custom field. This will be null if the &#x60;unit&#x60; is not &#x60;currency&#x60;.
        /// </summary>
        /// <value>ISO 4217 currency code to format this custom field. This will be null if the &#x60;unit&#x60; is not &#x60;currency&#x60;.</value>
        [DataMember(Name="currency_code", EmitDefaultValue=true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// This number is the start value of a goal metric of type number.
        /// </summary>
        /// <value>This number is the start value of a goal metric of type number.</value>
        [DataMember(Name="initial_number_value", EmitDefaultValue=false)]
        public decimal InitialNumberValue { get; set; }

        /// <summary>
        /// This number is the end value of a goal metric of type number. This number cannot equal &#x60;initial_number_value&#x60;.
        /// </summary>
        /// <value>This number is the end value of a goal metric of type number. This number cannot equal &#x60;initial_number_value&#x60;.</value>
        [DataMember(Name="target_number_value", EmitDefaultValue=false)]
        public decimal TargetNumberValue { get; set; }

        /// <summary>
        /// This number is the current value of a goal metric of type number.
        /// </summary>
        /// <value>This number is the current value of a goal metric of type number.</value>
        [DataMember(Name="current_number_value", EmitDefaultValue=false)]
        public decimal CurrentNumberValue { get; set; }

        /// <summary>
        /// This string is the current value of a goal metric of type string.
        /// </summary>
        /// <value>This string is the current value of a goal metric of type string.</value>
        [DataMember(Name="current_display_value", EmitDefaultValue=false)]
        public string CurrentDisplayValue { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoalMetricBaseAllOf {\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  InitialNumberValue: ").Append(InitialNumberValue).Append("\n");
            sb.Append("  TargetNumberValue: ").Append(TargetNumberValue).Append("\n");
            sb.Append("  CurrentNumberValue: ").Append(CurrentNumberValue).Append("\n");
            sb.Append("  CurrentDisplayValue: ").Append(CurrentDisplayValue).Append("\n");
            sb.Append("  ProgressSource: ").Append(ProgressSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoalMetricBaseAllOf);
        }

        /// <summary>
        /// Returns true if GoalMetricBaseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of GoalMetricBaseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoalMetricBaseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceSubtype == input.ResourceSubtype ||
                    (this.ResourceSubtype != null &&
                    this.ResourceSubtype.Equals(input.ResourceSubtype))
                ) && 
                (
                    this.Precision == input.Precision ||
                    (this.Precision != null &&
                    this.Precision.Equals(input.Precision))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.InitialNumberValue == input.InitialNumberValue ||
                    (this.InitialNumberValue != null &&
                    this.InitialNumberValue.Equals(input.InitialNumberValue))
                ) && 
                (
                    this.TargetNumberValue == input.TargetNumberValue ||
                    (this.TargetNumberValue != null &&
                    this.TargetNumberValue.Equals(input.TargetNumberValue))
                ) && 
                (
                    this.CurrentNumberValue == input.CurrentNumberValue ||
                    (this.CurrentNumberValue != null &&
                    this.CurrentNumberValue.Equals(input.CurrentNumberValue))
                ) && 
                (
                    this.CurrentDisplayValue == input.CurrentDisplayValue ||
                    (this.CurrentDisplayValue != null &&
                    this.CurrentDisplayValue.Equals(input.CurrentDisplayValue))
                ) && 
                (
                    this.ProgressSource == input.ProgressSource ||
                    (this.ProgressSource != null &&
                    this.ProgressSource.Equals(input.ProgressSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceSubtype != null)
                    hashCode = hashCode * 59 + this.ResourceSubtype.GetHashCode();
                if (this.Precision != null)
                    hashCode = hashCode * 59 + this.Precision.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.InitialNumberValue != null)
                    hashCode = hashCode * 59 + this.InitialNumberValue.GetHashCode();
                if (this.TargetNumberValue != null)
                    hashCode = hashCode * 59 + this.TargetNumberValue.GetHashCode();
                if (this.CurrentNumberValue != null)
                    hashCode = hashCode * 59 + this.CurrentNumberValue.GetHashCode();
                if (this.CurrentDisplayValue != null)
                    hashCode = hashCode * 59 + this.CurrentDisplayValue.GetHashCode();
                if (this.ProgressSource != null)
                    hashCode = hashCode * 59 + this.ProgressSource.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
