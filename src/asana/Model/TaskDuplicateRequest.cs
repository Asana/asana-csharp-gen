/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// TaskDuplicateRequest
    /// </summary>
    [DataContract]
    public partial class TaskDuplicateRequest :  IEquatable<TaskDuplicateRequest>, IValidatableObject
    {
        /// <summary>
        /// The fields that will be duplicated to the new task.
        /// </summary>
        /// <value>The fields that will be duplicated to the new task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludeEnum
        {
            /// <summary>
            /// Enum Notes for value: notes
            /// </summary>
            [EnumMember(Value = "notes")]
            Notes = 1,

            /// <summary>
            /// Enum Assignee for value: assignee
            /// </summary>
            [EnumMember(Value = "assignee")]
            Assignee = 2,

            /// <summary>
            /// Enum Subtasks for value: subtasks
            /// </summary>
            [EnumMember(Value = "subtasks")]
            Subtasks = 3,

            /// <summary>
            /// Enum Attachments for value: attachments
            /// </summary>
            [EnumMember(Value = "attachments")]
            Attachments = 4,

            /// <summary>
            /// Enum Tags for value: tags
            /// </summary>
            [EnumMember(Value = "tags")]
            Tags = 5,

            /// <summary>
            /// Enum Followers for value: followers
            /// </summary>
            [EnumMember(Value = "followers")]
            Followers = 6,

            /// <summary>
            /// Enum Projects for value: projects
            /// </summary>
            [EnumMember(Value = "projects")]
            Projects = 7,

            /// <summary>
            /// Enum Dates for value: dates
            /// </summary>
            [EnumMember(Value = "dates")]
            Dates = 8,

            /// <summary>
            /// Enum Dependencies for value: dependencies
            /// </summary>
            [EnumMember(Value = "dependencies")]
            Dependencies = 9,

            /// <summary>
            /// Enum Parent for value: parent
            /// </summary>
            [EnumMember(Value = "parent")]
            Parent = 10

        }

        /// <summary>
        /// The fields that will be duplicated to the new task.
        /// </summary>
        /// <value>The fields that will be duplicated to the new task.</value>
        [DataMember(Name="include", EmitDefaultValue=false)]
        public IncludeEnum? Include { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDuplicateRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the new task..</param>
        /// <param name="include">The fields that will be duplicated to the new task..</param>
        public TaskDuplicateRequest(string name = default(string), IncludeEnum? include = default(IncludeEnum?))
        {
            this.Name = name;
            this.Include = include;
        }

        /// <summary>
        /// The name of the new task.
        /// </summary>
        /// <value>The name of the new task.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskDuplicateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskDuplicateRequest);
        }

        /// <summary>
        /// Returns true if TaskDuplicateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskDuplicateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskDuplicateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Include != null)
                    hashCode = hashCode * 59 + this.Include.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
