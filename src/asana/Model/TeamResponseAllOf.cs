/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// TeamResponseAllOf
    /// </summary>
    [DataContract]
    public partial class TeamResponseAllOf :  IEquatable<TeamResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// The visibility of the team to users in the same organization 
        /// </summary>
        /// <value>The visibility of the team to users in the same organization </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Secret for value: secret
            /// </summary>
            [EnumMember(Value = "secret")]
            Secret = 1,

            /// <summary>
            /// Enum Requesttojoin for value: request_to_join
            /// </summary>
            [EnumMember(Value = "request_to_join")]
            Requesttojoin = 2,

            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 3

        }

        /// <summary>
        /// The visibility of the team to users in the same organization 
        /// </summary>
        /// <value>The visibility of the team to users in the same organization </value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamResponseAllOf" /> class.
        /// </summary>
        /// <param name="description">[Opt In](/docs/input-output-options). The description of the team. .</param>
        /// <param name="htmlDescription">[Opt In](/docs/input-output-options). The description of the team with formatting as HTML. .</param>
        /// <param name="organization">organization.</param>
        /// <param name="visibility">The visibility of the team to users in the same organization .</param>
        public TeamResponseAllOf(string description = default(string), string htmlDescription = default(string), WorkspaceCompact organization = default(WorkspaceCompact), VisibilityEnum? visibility = default(VisibilityEnum?))
        {
            this.Description = description;
            this.HtmlDescription = htmlDescription;
            this.Organization = organization;
            this.Visibility = visibility;
        }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The description of the team. 
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The description of the team. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The description of the team with formatting as HTML. 
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The description of the team with formatting as HTML. </value>
        [DataMember(Name="html_description", EmitDefaultValue=false)]
        public string HtmlDescription { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public WorkspaceCompact Organization { get; set; }

        /// <summary>
        /// A url that points directly to the object within Asana.
        /// </summary>
        /// <value>A url that points directly to the object within Asana.</value>
        [DataMember(Name="permalink_url", EmitDefaultValue=false)]
        public string PermalinkUrl { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamResponseAllOf {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HtmlDescription: ").Append(HtmlDescription).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  PermalinkUrl: ").Append(PermalinkUrl).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamResponseAllOf);
        }

        /// <summary>
        /// Returns true if TeamResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HtmlDescription == input.HtmlDescription ||
                    (this.HtmlDescription != null &&
                    this.HtmlDescription.Equals(input.HtmlDescription))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.PermalinkUrl == input.PermalinkUrl ||
                    (this.PermalinkUrl != null &&
                    this.PermalinkUrl.Equals(input.PermalinkUrl))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.HtmlDescription != null)
                    hashCode = hashCode * 59 + this.HtmlDescription.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                if (this.PermalinkUrl != null)
                    hashCode = hashCode * 59 + this.PermalinkUrl.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
