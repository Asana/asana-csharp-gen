/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// TagBaseAllOf
    /// </summary>
    [DataContract]
    public partial class TagBaseAllOf :  IEquatable<TagBaseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Color of the tag.
        /// </summary>
        /// <value>Color of the tag.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            /// <summary>
            /// Enum DarkPink for value: dark-pink
            /// </summary>
            [EnumMember(Value = "dark-pink")]
            DarkPink = 1,

            /// <summary>
            /// Enum DarkGreen for value: dark-green
            /// </summary>
            [EnumMember(Value = "dark-green")]
            DarkGreen = 2,

            /// <summary>
            /// Enum DarkBlue for value: dark-blue
            /// </summary>
            [EnumMember(Value = "dark-blue")]
            DarkBlue = 3,

            /// <summary>
            /// Enum DarkRed for value: dark-red
            /// </summary>
            [EnumMember(Value = "dark-red")]
            DarkRed = 4,

            /// <summary>
            /// Enum DarkTeal for value: dark-teal
            /// </summary>
            [EnumMember(Value = "dark-teal")]
            DarkTeal = 5,

            /// <summary>
            /// Enum DarkBrown for value: dark-brown
            /// </summary>
            [EnumMember(Value = "dark-brown")]
            DarkBrown = 6,

            /// <summary>
            /// Enum DarkOrange for value: dark-orange
            /// </summary>
            [EnumMember(Value = "dark-orange")]
            DarkOrange = 7,

            /// <summary>
            /// Enum DarkPurple for value: dark-purple
            /// </summary>
            [EnumMember(Value = "dark-purple")]
            DarkPurple = 8,

            /// <summary>
            /// Enum DarkWarmGray for value: dark-warm-gray
            /// </summary>
            [EnumMember(Value = "dark-warm-gray")]
            DarkWarmGray = 9,

            /// <summary>
            /// Enum LightPink for value: light-pink
            /// </summary>
            [EnumMember(Value = "light-pink")]
            LightPink = 10,

            /// <summary>
            /// Enum LightGreen for value: light-green
            /// </summary>
            [EnumMember(Value = "light-green")]
            LightGreen = 11,

            /// <summary>
            /// Enum LightBlue for value: light-blue
            /// </summary>
            [EnumMember(Value = "light-blue")]
            LightBlue = 12,

            /// <summary>
            /// Enum LightRed for value: light-red
            /// </summary>
            [EnumMember(Value = "light-red")]
            LightRed = 13,

            /// <summary>
            /// Enum LightTeal for value: light-teal
            /// </summary>
            [EnumMember(Value = "light-teal")]
            LightTeal = 14,

            /// <summary>
            /// Enum LightBrown for value: light-brown
            /// </summary>
            [EnumMember(Value = "light-brown")]
            LightBrown = 15,

            /// <summary>
            /// Enum LightOrange for value: light-orange
            /// </summary>
            [EnumMember(Value = "light-orange")]
            LightOrange = 16,

            /// <summary>
            /// Enum LightPurple for value: light-purple
            /// </summary>
            [EnumMember(Value = "light-purple")]
            LightPurple = 17,

            /// <summary>
            /// Enum LightWarmGray for value: light-warm-gray
            /// </summary>
            [EnumMember(Value = "light-warm-gray")]
            LightWarmGray = 18

        }

        /// <summary>
        /// Color of the tag.
        /// </summary>
        /// <value>Color of the tag.</value>
        [DataMember(Name="color", EmitDefaultValue=true)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TagBaseAllOf" /> class.
        /// </summary>
        /// <param name="color">Color of the tag..</param>
        /// <param name="notes">Free-form textual information associated with the tag (i.e. its description)..</param>
        public TagBaseAllOf(ColorEnum? color = default(ColorEnum?), string notes = default(string))
        {
            this.Color = color;
            this.Color = color;
            this.Notes = notes;
        }


        /// <summary>
        /// Free-form textual information associated with the tag (i.e. its description).
        /// </summary>
        /// <value>Free-form textual information associated with the tag (i.e. its description).</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagBaseAllOf {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TagBaseAllOf);
        }

        /// <summary>
        /// Returns true if TagBaseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TagBaseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagBaseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
