/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// StoryResponseAllOf
    /// </summary>
    [DataContract]
    public partial class StoryResponseAllOf :  IEquatable<StoryResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Comment for value: comment
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment = 1,

            /// <summary>
            /// Enum System for value: system
            /// </summary>
            [EnumMember(Value = "system")]
            System = 2

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The component of the Asana product the user used to trigger the story.
        /// </summary>
        /// <value>The component of the Asana product the user used to trigger the story.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Web for value: web
            /// </summary>
            [EnumMember(Value = "web")]
            Web = 1,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 2,

            /// <summary>
            /// Enum Mobile for value: mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            Mobile = 3,

            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 4,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 5

        }

        /// <summary>
        /// The component of the Asana product the user used to trigger the story.
        /// </summary>
        /// <value>The component of the Asana product the user used to trigger the story.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoryResponseAllOf" /> class.
        /// </summary>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="oldName">*Conditional*&#39;.</param>
        /// <param name="oldDates">oldDates.</param>
        /// <param name="newDates">newDates.</param>
        /// <param name="story">story.</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="follower">follower.</param>
        /// <param name="oldSection">oldSection.</param>
        /// <param name="newSection">newSection.</param>
        /// <param name="task">task.</param>
        /// <param name="project">project.</param>
        /// <param name="tag">tag.</param>
        /// <param name="customField">customField.</param>
        /// <param name="oldEnumValue">oldEnumValue.</param>
        /// <param name="newEnumValue">newEnumValue.</param>
        /// <param name="duplicateOf">duplicateOf.</param>
        /// <param name="duplicatedFrom">duplicatedFrom.</param>
        /// <param name="dependency">dependency.</param>
        /// <param name="target">target.</param>
        public StoryResponseAllOf(UserCompact createdBy = default(UserCompact), string oldName = default(string), StoryResponseDates oldDates = default(StoryResponseDates), StoryResponseDates newDates = default(StoryResponseDates), StoryCompact story = default(StoryCompact), UserCompact assignee = default(UserCompact), UserCompact follower = default(UserCompact), SectionCompact oldSection = default(SectionCompact), SectionCompact newSection = default(SectionCompact), TaskCompact task = default(TaskCompact), ProjectCompact project = default(ProjectCompact), TagCompact tag = default(TagCompact), CustomFieldCompact customField = default(CustomFieldCompact), EnumOption oldEnumValue = default(EnumOption), EnumOption newEnumValue = default(EnumOption), TaskCompact duplicateOf = default(TaskCompact), TaskCompact duplicatedFrom = default(TaskCompact), TaskCompact dependency = default(TaskCompact), TaskCompact target = default(TaskCompact))
        {
            this.CreatedBy = createdBy;
            this.OldName = oldName;
            this.OldDates = oldDates;
            this.NewDates = newDates;
            this.Story = story;
            this.Assignee = assignee;
            this.Follower = follower;
            this.OldSection = oldSection;
            this.NewSection = newSection;
            this.Task = task;
            this.Project = project;
            this.Tag = tag;
            this.CustomField = customField;
            this.OldEnumValue = oldEnumValue;
            this.NewEnumValue = newEnumValue;
            this.DuplicateOf = duplicateOf;
            this.DuplicatedFrom = duplicatedFrom;
            this.Dependency = dependency;
            this.Target = target;
        }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public UserCompact CreatedBy { get; set; }


        /// <summary>
        /// *Conditional*. Whether the text of the story can be edited after creation.
        /// </summary>
        /// <value>*Conditional*. Whether the text of the story can be edited after creation.</value>
        [DataMember(Name="is_editable", EmitDefaultValue=false)]
        public bool IsEditable { get; private set; }

        /// <summary>
        /// *Conditional*. Whether the text of the story has been edited after creation.
        /// </summary>
        /// <value>*Conditional*. Whether the text of the story has been edited after creation.</value>
        [DataMember(Name="is_edited", EmitDefaultValue=false)]
        public bool IsEdited { get; private set; }

        /// <summary>
        /// *Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.</value>
        [DataMember(Name="hearted", EmitDefaultValue=false)]
        public bool Hearted { get; private set; }

        /// <summary>
        /// *Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.
        /// </summary>
        /// <value>*Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.</value>
        [DataMember(Name="hearts", EmitDefaultValue=false)]
        public List<Like> Hearts { get; private set; }

        /// <summary>
        /// *Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.
        /// </summary>
        /// <value>*Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.</value>
        [DataMember(Name="num_hearts", EmitDefaultValue=false)]
        public int NumHearts { get; private set; }

        /// <summary>
        /// *Conditional*. True if the story is liked by the authorized user, false if not.
        /// </summary>
        /// <value>*Conditional*. True if the story is liked by the authorized user, false if not.</value>
        [DataMember(Name="liked", EmitDefaultValue=false)]
        public bool Liked { get; private set; }

        /// <summary>
        /// *Conditional*. Array of likes for users who have liked this story.
        /// </summary>
        /// <value>*Conditional*. Array of likes for users who have liked this story.</value>
        [DataMember(Name="likes", EmitDefaultValue=false)]
        public List<Like> Likes { get; private set; }

        /// <summary>
        /// *Conditional*. The number of users who have liked this story.
        /// </summary>
        /// <value>*Conditional*. The number of users who have liked this story.</value>
        [DataMember(Name="num_likes", EmitDefaultValue=false)]
        public int NumLikes { get; private set; }

        /// <summary>
        /// *Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*
        /// </summary>
        /// <value>*Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*</value>
        [DataMember(Name="previews", EmitDefaultValue=false)]
        public List<Preview> Previews { get; private set; }

        /// <summary>
        /// *Conditional*&#39;
        /// </summary>
        /// <value>*Conditional*&#39;</value>
        [DataMember(Name="old_name", EmitDefaultValue=false)]
        public string OldName { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="new_name", EmitDefaultValue=false)]
        public string NewName { get; private set; }

        /// <summary>
        /// Gets or Sets OldDates
        /// </summary>
        [DataMember(Name="old_dates", EmitDefaultValue=false)]
        public StoryResponseDates OldDates { get; set; }

        /// <summary>
        /// Gets or Sets NewDates
        /// </summary>
        [DataMember(Name="new_dates", EmitDefaultValue=false)]
        public StoryResponseDates NewDates { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="old_resource_subtype", EmitDefaultValue=false)]
        public string OldResourceSubtype { get; private set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="new_resource_subtype", EmitDefaultValue=false)]
        public string NewResourceSubtype { get; private set; }

        /// <summary>
        /// Gets or Sets Story
        /// </summary>
        [DataMember(Name="story", EmitDefaultValue=false)]
        public StoryCompact Story { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public UserCompact Assignee { get; set; }

        /// <summary>
        /// Gets or Sets Follower
        /// </summary>
        [DataMember(Name="follower", EmitDefaultValue=false)]
        public UserCompact Follower { get; set; }

        /// <summary>
        /// Gets or Sets OldSection
        /// </summary>
        [DataMember(Name="old_section", EmitDefaultValue=false)]
        public SectionCompact OldSection { get; set; }

        /// <summary>
        /// Gets or Sets NewSection
        /// </summary>
        [DataMember(Name="new_section", EmitDefaultValue=false)]
        public SectionCompact NewSection { get; set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name="task", EmitDefaultValue=false)]
        public TaskCompact Task { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public ProjectCompact Project { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public TagCompact Tag { get; set; }

        /// <summary>
        /// Gets or Sets CustomField
        /// </summary>
        [DataMember(Name="custom_field", EmitDefaultValue=false)]
        public CustomFieldCompact CustomField { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="old_text_value", EmitDefaultValue=false)]
        public string OldTextValue { get; private set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="new_text_value", EmitDefaultValue=false)]
        public string NewTextValue { get; private set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="old_number_value", EmitDefaultValue=false)]
        public int OldNumberValue { get; private set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="new_number_value", EmitDefaultValue=false)]
        public int NewNumberValue { get; private set; }

        /// <summary>
        /// Gets or Sets OldEnumValue
        /// </summary>
        [DataMember(Name="old_enum_value", EmitDefaultValue=false)]
        public EnumOption OldEnumValue { get; set; }

        /// <summary>
        /// Gets or Sets NewEnumValue
        /// </summary>
        [DataMember(Name="new_enum_value", EmitDefaultValue=false)]
        public EnumOption NewEnumValue { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="old_multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> OldMultiEnumValues { get; private set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="new_multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> NewMultiEnumValues { get; private set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="new_approval_status", EmitDefaultValue=false)]
        public string NewApprovalStatus { get; private set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        [DataMember(Name="old_approval_status", EmitDefaultValue=false)]
        public string OldApprovalStatus { get; private set; }

        /// <summary>
        /// Gets or Sets DuplicateOf
        /// </summary>
        [DataMember(Name="duplicate_of", EmitDefaultValue=false)]
        public TaskCompact DuplicateOf { get; set; }

        /// <summary>
        /// Gets or Sets DuplicatedFrom
        /// </summary>
        [DataMember(Name="duplicated_from", EmitDefaultValue=false)]
        public TaskCompact DuplicatedFrom { get; set; }

        /// <summary>
        /// Gets or Sets Dependency
        /// </summary>
        [DataMember(Name="dependency", EmitDefaultValue=false)]
        public TaskCompact Dependency { get; set; }


        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public TaskCompact Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoryResponseAllOf {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  IsEdited: ").Append(IsEdited).Append("\n");
            sb.Append("  Hearted: ").Append(Hearted).Append("\n");
            sb.Append("  Hearts: ").Append(Hearts).Append("\n");
            sb.Append("  NumHearts: ").Append(NumHearts).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  Previews: ").Append(Previews).Append("\n");
            sb.Append("  OldName: ").Append(OldName).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  OldDates: ").Append(OldDates).Append("\n");
            sb.Append("  NewDates: ").Append(NewDates).Append("\n");
            sb.Append("  OldResourceSubtype: ").Append(OldResourceSubtype).Append("\n");
            sb.Append("  NewResourceSubtype: ").Append(NewResourceSubtype).Append("\n");
            sb.Append("  Story: ").Append(Story).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  Follower: ").Append(Follower).Append("\n");
            sb.Append("  OldSection: ").Append(OldSection).Append("\n");
            sb.Append("  NewSection: ").Append(NewSection).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  CustomField: ").Append(CustomField).Append("\n");
            sb.Append("  OldTextValue: ").Append(OldTextValue).Append("\n");
            sb.Append("  NewTextValue: ").Append(NewTextValue).Append("\n");
            sb.Append("  OldNumberValue: ").Append(OldNumberValue).Append("\n");
            sb.Append("  NewNumberValue: ").Append(NewNumberValue).Append("\n");
            sb.Append("  OldEnumValue: ").Append(OldEnumValue).Append("\n");
            sb.Append("  NewEnumValue: ").Append(NewEnumValue).Append("\n");
            sb.Append("  OldMultiEnumValues: ").Append(OldMultiEnumValues).Append("\n");
            sb.Append("  NewMultiEnumValues: ").Append(NewMultiEnumValues).Append("\n");
            sb.Append("  NewApprovalStatus: ").Append(NewApprovalStatus).Append("\n");
            sb.Append("  OldApprovalStatus: ").Append(OldApprovalStatus).Append("\n");
            sb.Append("  DuplicateOf: ").Append(DuplicateOf).Append("\n");
            sb.Append("  DuplicatedFrom: ").Append(DuplicatedFrom).Append("\n");
            sb.Append("  Dependency: ").Append(Dependency).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoryResponseAllOf);
        }

        /// <summary>
        /// Returns true if StoryResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of StoryResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoryResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IsEditable == input.IsEditable ||
                    (this.IsEditable != null &&
                    this.IsEditable.Equals(input.IsEditable))
                ) && 
                (
                    this.IsEdited == input.IsEdited ||
                    (this.IsEdited != null &&
                    this.IsEdited.Equals(input.IsEdited))
                ) && 
                (
                    this.Hearted == input.Hearted ||
                    (this.Hearted != null &&
                    this.Hearted.Equals(input.Hearted))
                ) && 
                (
                    this.Hearts == input.Hearts ||
                    this.Hearts != null &&
                    input.Hearts != null &&
                    this.Hearts.SequenceEqual(input.Hearts)
                ) && 
                (
                    this.NumHearts == input.NumHearts ||
                    (this.NumHearts != null &&
                    this.NumHearts.Equals(input.NumHearts))
                ) && 
                (
                    this.Liked == input.Liked ||
                    (this.Liked != null &&
                    this.Liked.Equals(input.Liked))
                ) && 
                (
                    this.Likes == input.Likes ||
                    this.Likes != null &&
                    input.Likes != null &&
                    this.Likes.SequenceEqual(input.Likes)
                ) && 
                (
                    this.NumLikes == input.NumLikes ||
                    (this.NumLikes != null &&
                    this.NumLikes.Equals(input.NumLikes))
                ) && 
                (
                    this.Previews == input.Previews ||
                    this.Previews != null &&
                    input.Previews != null &&
                    this.Previews.SequenceEqual(input.Previews)
                ) && 
                (
                    this.OldName == input.OldName ||
                    (this.OldName != null &&
                    this.OldName.Equals(input.OldName))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                ) && 
                (
                    this.OldDates == input.OldDates ||
                    (this.OldDates != null &&
                    this.OldDates.Equals(input.OldDates))
                ) && 
                (
                    this.NewDates == input.NewDates ||
                    (this.NewDates != null &&
                    this.NewDates.Equals(input.NewDates))
                ) && 
                (
                    this.OldResourceSubtype == input.OldResourceSubtype ||
                    (this.OldResourceSubtype != null &&
                    this.OldResourceSubtype.Equals(input.OldResourceSubtype))
                ) && 
                (
                    this.NewResourceSubtype == input.NewResourceSubtype ||
                    (this.NewResourceSubtype != null &&
                    this.NewResourceSubtype.Equals(input.NewResourceSubtype))
                ) && 
                (
                    this.Story == input.Story ||
                    (this.Story != null &&
                    this.Story.Equals(input.Story))
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.Follower == input.Follower ||
                    (this.Follower != null &&
                    this.Follower.Equals(input.Follower))
                ) && 
                (
                    this.OldSection == input.OldSection ||
                    (this.OldSection != null &&
                    this.OldSection.Equals(input.OldSection))
                ) && 
                (
                    this.NewSection == input.NewSection ||
                    (this.NewSection != null &&
                    this.NewSection.Equals(input.NewSection))
                ) && 
                (
                    this.Task == input.Task ||
                    (this.Task != null &&
                    this.Task.Equals(input.Task))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.CustomField == input.CustomField ||
                    (this.CustomField != null &&
                    this.CustomField.Equals(input.CustomField))
                ) && 
                (
                    this.OldTextValue == input.OldTextValue ||
                    (this.OldTextValue != null &&
                    this.OldTextValue.Equals(input.OldTextValue))
                ) && 
                (
                    this.NewTextValue == input.NewTextValue ||
                    (this.NewTextValue != null &&
                    this.NewTextValue.Equals(input.NewTextValue))
                ) && 
                (
                    this.OldNumberValue == input.OldNumberValue ||
                    (this.OldNumberValue != null &&
                    this.OldNumberValue.Equals(input.OldNumberValue))
                ) && 
                (
                    this.NewNumberValue == input.NewNumberValue ||
                    (this.NewNumberValue != null &&
                    this.NewNumberValue.Equals(input.NewNumberValue))
                ) && 
                (
                    this.OldEnumValue == input.OldEnumValue ||
                    (this.OldEnumValue != null &&
                    this.OldEnumValue.Equals(input.OldEnumValue))
                ) && 
                (
                    this.NewEnumValue == input.NewEnumValue ||
                    (this.NewEnumValue != null &&
                    this.NewEnumValue.Equals(input.NewEnumValue))
                ) && 
                (
                    this.OldMultiEnumValues == input.OldMultiEnumValues ||
                    this.OldMultiEnumValues != null &&
                    input.OldMultiEnumValues != null &&
                    this.OldMultiEnumValues.SequenceEqual(input.OldMultiEnumValues)
                ) && 
                (
                    this.NewMultiEnumValues == input.NewMultiEnumValues ||
                    this.NewMultiEnumValues != null &&
                    input.NewMultiEnumValues != null &&
                    this.NewMultiEnumValues.SequenceEqual(input.NewMultiEnumValues)
                ) && 
                (
                    this.NewApprovalStatus == input.NewApprovalStatus ||
                    (this.NewApprovalStatus != null &&
                    this.NewApprovalStatus.Equals(input.NewApprovalStatus))
                ) && 
                (
                    this.OldApprovalStatus == input.OldApprovalStatus ||
                    (this.OldApprovalStatus != null &&
                    this.OldApprovalStatus.Equals(input.OldApprovalStatus))
                ) && 
                (
                    this.DuplicateOf == input.DuplicateOf ||
                    (this.DuplicateOf != null &&
                    this.DuplicateOf.Equals(input.DuplicateOf))
                ) && 
                (
                    this.DuplicatedFrom == input.DuplicatedFrom ||
                    (this.DuplicatedFrom != null &&
                    this.DuplicatedFrom.Equals(input.DuplicatedFrom))
                ) && 
                (
                    this.Dependency == input.Dependency ||
                    (this.Dependency != null &&
                    this.Dependency.Equals(input.Dependency))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IsEditable != null)
                    hashCode = hashCode * 59 + this.IsEditable.GetHashCode();
                if (this.IsEdited != null)
                    hashCode = hashCode * 59 + this.IsEdited.GetHashCode();
                if (this.Hearted != null)
                    hashCode = hashCode * 59 + this.Hearted.GetHashCode();
                if (this.Hearts != null)
                    hashCode = hashCode * 59 + this.Hearts.GetHashCode();
                if (this.NumHearts != null)
                    hashCode = hashCode * 59 + this.NumHearts.GetHashCode();
                if (this.Liked != null)
                    hashCode = hashCode * 59 + this.Liked.GetHashCode();
                if (this.Likes != null)
                    hashCode = hashCode * 59 + this.Likes.GetHashCode();
                if (this.NumLikes != null)
                    hashCode = hashCode * 59 + this.NumLikes.GetHashCode();
                if (this.Previews != null)
                    hashCode = hashCode * 59 + this.Previews.GetHashCode();
                if (this.OldName != null)
                    hashCode = hashCode * 59 + this.OldName.GetHashCode();
                if (this.NewName != null)
                    hashCode = hashCode * 59 + this.NewName.GetHashCode();
                if (this.OldDates != null)
                    hashCode = hashCode * 59 + this.OldDates.GetHashCode();
                if (this.NewDates != null)
                    hashCode = hashCode * 59 + this.NewDates.GetHashCode();
                if (this.OldResourceSubtype != null)
                    hashCode = hashCode * 59 + this.OldResourceSubtype.GetHashCode();
                if (this.NewResourceSubtype != null)
                    hashCode = hashCode * 59 + this.NewResourceSubtype.GetHashCode();
                if (this.Story != null)
                    hashCode = hashCode * 59 + this.Story.GetHashCode();
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.Follower != null)
                    hashCode = hashCode * 59 + this.Follower.GetHashCode();
                if (this.OldSection != null)
                    hashCode = hashCode * 59 + this.OldSection.GetHashCode();
                if (this.NewSection != null)
                    hashCode = hashCode * 59 + this.NewSection.GetHashCode();
                if (this.Task != null)
                    hashCode = hashCode * 59 + this.Task.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.CustomField != null)
                    hashCode = hashCode * 59 + this.CustomField.GetHashCode();
                if (this.OldTextValue != null)
                    hashCode = hashCode * 59 + this.OldTextValue.GetHashCode();
                if (this.NewTextValue != null)
                    hashCode = hashCode * 59 + this.NewTextValue.GetHashCode();
                if (this.OldNumberValue != null)
                    hashCode = hashCode * 59 + this.OldNumberValue.GetHashCode();
                if (this.NewNumberValue != null)
                    hashCode = hashCode * 59 + this.NewNumberValue.GetHashCode();
                if (this.OldEnumValue != null)
                    hashCode = hashCode * 59 + this.OldEnumValue.GetHashCode();
                if (this.NewEnumValue != null)
                    hashCode = hashCode * 59 + this.NewEnumValue.GetHashCode();
                if (this.OldMultiEnumValues != null)
                    hashCode = hashCode * 59 + this.OldMultiEnumValues.GetHashCode();
                if (this.NewMultiEnumValues != null)
                    hashCode = hashCode * 59 + this.NewMultiEnumValues.GetHashCode();
                if (this.NewApprovalStatus != null)
                    hashCode = hashCode * 59 + this.NewApprovalStatus.GetHashCode();
                if (this.OldApprovalStatus != null)
                    hashCode = hashCode * 59 + this.OldApprovalStatus.GetHashCode();
                if (this.DuplicateOf != null)
                    hashCode = hashCode * 59 + this.DuplicateOf.GetHashCode();
                if (this.DuplicatedFrom != null)
                    hashCode = hashCode * 59 + this.DuplicatedFrom.GetHashCode();
                if (this.Dependency != null)
                    hashCode = hashCode * 59 + this.Dependency.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
