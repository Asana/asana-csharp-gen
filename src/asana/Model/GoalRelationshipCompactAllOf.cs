/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// A *goal relationship* is an object representing the relationship between a goal and another goal, a project, or a portfolio.
    /// </summary>
    [DataContract]
    public partial class GoalRelationshipCompactAllOf :  IEquatable<GoalRelationshipCompactAllOf>, IValidatableObject
    {
        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum Subgoal for value: subgoal
            /// </summary>
            [EnumMember(Value = "subgoal")]
            Subgoal = 1,

            /// <summary>
            /// Enum Supportingwork for value: supporting_work
            /// </summary>
            [EnumMember(Value = "supporting_work")]
            Supportingwork = 2

        }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GoalRelationshipCompactAllOf" /> class.
        /// </summary>
        /// <param name="supportingResource">supportingResource.</param>
        /// <param name="contributionWeight">The weight that the supporting resource&#39;s progress contributes to the supported goal&#39;s progress. This can only be 0 or 1..</param>
        public GoalRelationshipCompactAllOf(ProjectCompact supportingResource = default(ProjectCompact), decimal contributionWeight = default(decimal))
        {
            this.SupportingResource = supportingResource;
            this.ContributionWeight = contributionWeight;
        }


        /// <summary>
        /// Gets or Sets SupportingResource
        /// </summary>
        [DataMember(Name="supporting_resource", EmitDefaultValue=false)]
        public ProjectCompact SupportingResource { get; set; }

        /// <summary>
        /// The weight that the supporting resource&#39;s progress contributes to the supported goal&#39;s progress. This can only be 0 or 1.
        /// </summary>
        /// <value>The weight that the supporting resource&#39;s progress contributes to the supported goal&#39;s progress. This can only be 0 or 1.</value>
        [DataMember(Name="contribution_weight", EmitDefaultValue=false)]
        public decimal ContributionWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoalRelationshipCompactAllOf {\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  SupportingResource: ").Append(SupportingResource).Append("\n");
            sb.Append("  ContributionWeight: ").Append(ContributionWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoalRelationshipCompactAllOf);
        }

        /// <summary>
        /// Returns true if GoalRelationshipCompactAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of GoalRelationshipCompactAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoalRelationshipCompactAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceSubtype == input.ResourceSubtype ||
                    (this.ResourceSubtype != null &&
                    this.ResourceSubtype.Equals(input.ResourceSubtype))
                ) && 
                (
                    this.SupportingResource == input.SupportingResource ||
                    (this.SupportingResource != null &&
                    this.SupportingResource.Equals(input.SupportingResource))
                ) && 
                (
                    this.ContributionWeight == input.ContributionWeight ||
                    (this.ContributionWeight != null &&
                    this.ContributionWeight.Equals(input.ContributionWeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceSubtype != null)
                    hashCode = hashCode * 59 + this.ResourceSubtype.GetHashCode();
                if (this.SupportingResource != null)
                    hashCode = hashCode * 59 + this.SupportingResource.GetHashCode();
                if (this.ContributionWeight != null)
                    hashCode = hashCode * 59 + this.ContributionWeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
