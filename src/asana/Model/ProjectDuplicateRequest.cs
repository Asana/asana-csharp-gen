/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// ProjectDuplicateRequest
    /// </summary>
    [DataContract]
    public partial class ProjectDuplicateRequest :  IEquatable<ProjectDuplicateRequest>, IValidatableObject
    {
        /// <summary>
        /// The elements that will be duplicated to the new project. Tasks are always included.
        /// </summary>
        /// <value>The elements that will be duplicated to the new project. Tasks are always included.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludeEnum
        {
            /// <summary>
            /// Enum Members for value: members
            /// </summary>
            [EnumMember(Value = "members")]
            Members = 1,

            /// <summary>
            /// Enum Notes for value: notes
            /// </summary>
            [EnumMember(Value = "notes")]
            Notes = 2,

            /// <summary>
            /// Enum Forms for value: forms
            /// </summary>
            [EnumMember(Value = "forms")]
            Forms = 3,

            /// <summary>
            /// Enum Tasknotes for value: task_notes
            /// </summary>
            [EnumMember(Value = "task_notes")]
            Tasknotes = 4,

            /// <summary>
            /// Enum Taskassignee for value: task_assignee
            /// </summary>
            [EnumMember(Value = "task_assignee")]
            Taskassignee = 5,

            /// <summary>
            /// Enum Tasksubtasks for value: task_subtasks
            /// </summary>
            [EnumMember(Value = "task_subtasks")]
            Tasksubtasks = 6,

            /// <summary>
            /// Enum Taskattachments for value: task_attachments
            /// </summary>
            [EnumMember(Value = "task_attachments")]
            Taskattachments = 7,

            /// <summary>
            /// Enum Taskdates for value: task_dates
            /// </summary>
            [EnumMember(Value = "task_dates")]
            Taskdates = 8,

            /// <summary>
            /// Enum Taskdependencies for value: task_dependencies
            /// </summary>
            [EnumMember(Value = "task_dependencies")]
            Taskdependencies = 9,

            /// <summary>
            /// Enum Taskfollowers for value: task_followers
            /// </summary>
            [EnumMember(Value = "task_followers")]
            Taskfollowers = 10,

            /// <summary>
            /// Enum Tasktags for value: task_tags
            /// </summary>
            [EnumMember(Value = "task_tags")]
            Tasktags = 11,

            /// <summary>
            /// Enum Taskprojects for value: task_projects
            /// </summary>
            [EnumMember(Value = "task_projects")]
            Taskprojects = 12

        }

        /// <summary>
        /// The elements that will be duplicated to the new project. Tasks are always included.
        /// </summary>
        /// <value>The elements that will be duplicated to the new project. Tasks are always included.</value>
        [DataMember(Name="include", EmitDefaultValue=false)]
        public IncludeEnum? Include { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDuplicateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectDuplicateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDuplicateRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the new project. (required).</param>
        /// <param name="team">Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project..</param>
        /// <param name="include">The elements that will be duplicated to the new project. Tasks are always included..</param>
        /// <param name="scheduleDates">scheduleDates.</param>
        public ProjectDuplicateRequest(string name = default(string), string team = default(string), IncludeEnum? include = default(IncludeEnum?), ProjectDuplicateRequestScheduleDates scheduleDates = default(ProjectDuplicateRequestScheduleDates))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProjectDuplicateRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Team = team;
            this.Include = include;
            this.ScheduleDates = scheduleDates;
        }

        /// <summary>
        /// The name of the new project.
        /// </summary>
        /// <value>The name of the new project.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
        /// </summary>
        /// <value>Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.</value>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }


        /// <summary>
        /// Gets or Sets ScheduleDates
        /// </summary>
        [DataMember(Name="schedule_dates", EmitDefaultValue=false)]
        public ProjectDuplicateRequestScheduleDates ScheduleDates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectDuplicateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  ScheduleDates: ").Append(ScheduleDates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectDuplicateRequest);
        }

        /// <summary>
        /// Returns true if ProjectDuplicateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectDuplicateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectDuplicateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                ) && 
                (
                    this.ScheduleDates == input.ScheduleDates ||
                    (this.ScheduleDates != null &&
                    this.ScheduleDates.Equals(input.ScheduleDates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                if (this.Include != null)
                    hashCode = hashCode * 59 + this.Include.GetHashCode();
                if (this.ScheduleDates != null)
                    hashCode = hashCode * 59 + this.ScheduleDates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
