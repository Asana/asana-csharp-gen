/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// ProjectTemplateInstantiateProjectRequest
    /// </summary>
    [DataContract]
    public partial class ProjectTemplateInstantiateProjectRequest :  IEquatable<ProjectTemplateInstantiateProjectRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectTemplateInstantiateProjectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectTemplateInstantiateProjectRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectTemplateInstantiateProjectRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the new project. (required).</param>
        /// <param name="team">*Conditional*. Sets the team of the new project. If the project template exists in an _organization_, you must specify a value for &#x60;team&#x60; and not &#x60;workspace&#x60;..</param>
        /// <param name="workspace">*Conditional*. Sets the workspace of the new project. If the project template exists in a _workspace_, you must specify a value for &#x60;workspace&#x60; and not &#x60;team&#x60;..</param>
        /// <param name="_public">Sets the project to public to its team. (required).</param>
        /// <param name="isStrict">*Optional*. If set to &#x60;true&#x60;, the endpoint returns an \&quot;Unprocessable Entity\&quot; error if you fail to provide a calendar date value for any date variable. If set to &#x60;false&#x60;, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project)..</param>
        /// <param name="requestedDates">Array of mappings of date variables to calendar dates..</param>
        public ProjectTemplateInstantiateProjectRequest(string name = default(string), string team = default(string), string workspace = default(string), bool _public = default(bool), bool isStrict = default(bool), List<DateVariableRequest> requestedDates = default(List<DateVariableRequest>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProjectTemplateInstantiateProjectRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "_public" is required (not null)
            if (_public == null)
            {
                throw new InvalidDataException("_public is a required property for ProjectTemplateInstantiateProjectRequest and cannot be null");
            }
            else
            {
                this.Public = _public;
            }

            this.Team = team;
            this.Workspace = workspace;
            this.IsStrict = isStrict;
            this.RequestedDates = requestedDates;
        }

        /// <summary>
        /// The name of the new project.
        /// </summary>
        /// <value>The name of the new project.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// *Conditional*. Sets the team of the new project. If the project template exists in an _organization_, you must specify a value for &#x60;team&#x60; and not &#x60;workspace&#x60;.
        /// </summary>
        /// <value>*Conditional*. Sets the team of the new project. If the project template exists in an _organization_, you must specify a value for &#x60;team&#x60; and not &#x60;workspace&#x60;.</value>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// *Conditional*. Sets the workspace of the new project. If the project template exists in a _workspace_, you must specify a value for &#x60;workspace&#x60; and not &#x60;team&#x60;.
        /// </summary>
        /// <value>*Conditional*. Sets the workspace of the new project. If the project template exists in a _workspace_, you must specify a value for &#x60;workspace&#x60; and not &#x60;team&#x60;.</value>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public string Workspace { get; set; }

        /// <summary>
        /// Sets the project to public to its team.
        /// </summary>
        /// <value>Sets the project to public to its team.</value>
        [DataMember(Name="public", EmitDefaultValue=true)]
        public bool Public { get; set; }

        /// <summary>
        /// *Optional*. If set to &#x60;true&#x60;, the endpoint returns an \&quot;Unprocessable Entity\&quot; error if you fail to provide a calendar date value for any date variable. If set to &#x60;false&#x60;, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).
        /// </summary>
        /// <value>*Optional*. If set to &#x60;true&#x60;, the endpoint returns an \&quot;Unprocessable Entity\&quot; error if you fail to provide a calendar date value for any date variable. If set to &#x60;false&#x60;, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).</value>
        [DataMember(Name="is_strict", EmitDefaultValue=false)]
        public bool IsStrict { get; set; }

        /// <summary>
        /// Array of mappings of date variables to calendar dates.
        /// </summary>
        /// <value>Array of mappings of date variables to calendar dates.</value>
        [DataMember(Name="requested_dates", EmitDefaultValue=false)]
        public List<DateVariableRequest> RequestedDates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectTemplateInstantiateProjectRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  IsStrict: ").Append(IsStrict).Append("\n");
            sb.Append("  RequestedDates: ").Append(RequestedDates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectTemplateInstantiateProjectRequest);
        }

        /// <summary>
        /// Returns true if ProjectTemplateInstantiateProjectRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectTemplateInstantiateProjectRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectTemplateInstantiateProjectRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.Workspace == input.Workspace ||
                    (this.Workspace != null &&
                    this.Workspace.Equals(input.Workspace))
                ) && 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.IsStrict == input.IsStrict ||
                    (this.IsStrict != null &&
                    this.IsStrict.Equals(input.IsStrict))
                ) && 
                (
                    this.RequestedDates == input.RequestedDates ||
                    this.RequestedDates != null &&
                    input.RequestedDates != null &&
                    this.RequestedDates.SequenceEqual(input.RequestedDates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                if (this.Workspace != null)
                    hashCode = hashCode * 59 + this.Workspace.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.IsStrict != null)
                    hashCode = hashCode * 59 + this.IsStrict.GetHashCode();
                if (this.RequestedDates != null)
                    hashCode = hashCode * 59 + this.RequestedDates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
