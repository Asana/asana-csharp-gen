/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// EnumOptionInsertRequest
    /// </summary>
    [DataContract]
    public partial class EnumOptionInsertRequest :  IEquatable<EnumOptionInsertRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnumOptionInsertRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnumOptionInsertRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnumOptionInsertRequest" /> class.
        /// </summary>
        /// <param name="enumOption">The gid of the enum option to relocate. (required).</param>
        /// <param name="beforeEnumOption">An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option..</param>
        /// <param name="afterEnumOption">An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option..</param>
        public EnumOptionInsertRequest(string enumOption = default(string), string beforeEnumOption = default(string), string afterEnumOption = default(string))
        {
            // to ensure "enumOption" is required (not null)
            if (enumOption == null)
            {
                throw new InvalidDataException("enumOption is a required property for EnumOptionInsertRequest and cannot be null");
            }
            else
            {
                this.EnumOption = enumOption;
            }

            this.BeforeEnumOption = beforeEnumOption;
            this.AfterEnumOption = afterEnumOption;
        }

        /// <summary>
        /// The gid of the enum option to relocate.
        /// </summary>
        /// <value>The gid of the enum option to relocate.</value>
        [DataMember(Name="enum_option", EmitDefaultValue=true)]
        public string EnumOption { get; set; }

        /// <summary>
        /// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
        /// </summary>
        /// <value>An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.</value>
        [DataMember(Name="before_enum_option", EmitDefaultValue=false)]
        public string BeforeEnumOption { get; set; }

        /// <summary>
        /// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
        /// </summary>
        /// <value>An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.</value>
        [DataMember(Name="after_enum_option", EmitDefaultValue=false)]
        public string AfterEnumOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnumOptionInsertRequest {\n");
            sb.Append("  EnumOption: ").Append(EnumOption).Append("\n");
            sb.Append("  BeforeEnumOption: ").Append(BeforeEnumOption).Append("\n");
            sb.Append("  AfterEnumOption: ").Append(AfterEnumOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnumOptionInsertRequest);
        }

        /// <summary>
        /// Returns true if EnumOptionInsertRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EnumOptionInsertRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnumOptionInsertRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnumOption == input.EnumOption ||
                    (this.EnumOption != null &&
                    this.EnumOption.Equals(input.EnumOption))
                ) && 
                (
                    this.BeforeEnumOption == input.BeforeEnumOption ||
                    (this.BeforeEnumOption != null &&
                    this.BeforeEnumOption.Equals(input.BeforeEnumOption))
                ) && 
                (
                    this.AfterEnumOption == input.AfterEnumOption ||
                    (this.AfterEnumOption != null &&
                    this.AfterEnumOption.Equals(input.AfterEnumOption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnumOption != null)
                    hashCode = hashCode * 59 + this.EnumOption.GetHashCode();
                if (this.BeforeEnumOption != null)
                    hashCode = hashCode * 59 + this.BeforeEnumOption.GetHashCode();
                if (this.AfterEnumOption != null)
                    hashCode = hashCode * 59 + this.AfterEnumOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
