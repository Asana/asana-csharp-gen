/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// StatusUpdateResponseAllOf
    /// </summary>
    [DataContract]
    public partial class StatusUpdateResponseAllOf :  IEquatable<StatusUpdateResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateResponseAllOf" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="liked">True if the status is liked by the authorized user, false if not..</param>
        /// <param name="parent">parent.</param>
        public StatusUpdateResponseAllOf(UserCompact author = default(UserCompact), UserCompact createdBy = default(UserCompact), bool liked = default(bool), ProjectCompact parent = default(ProjectCompact))
        {
            this.Author = author;
            this.CreatedBy = createdBy;
            this.Liked = liked;
            this.Parent = parent;
        }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public UserCompact Author { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public UserCompact CreatedBy { get; set; }

        /// <summary>
        /// *Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.
        /// </summary>
        /// <value>*Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.</value>
        [DataMember(Name="hearted", EmitDefaultValue=false)]
        public bool Hearted { get; private set; }

        /// <summary>
        /// *Deprecated - please use likes instead* Array of likes for users who have hearted this status.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* Array of likes for users who have hearted this status.</value>
        [DataMember(Name="hearts", EmitDefaultValue=false)]
        public List<Like> Hearts { get; private set; }

        /// <summary>
        /// True if the status is liked by the authorized user, false if not.
        /// </summary>
        /// <value>True if the status is liked by the authorized user, false if not.</value>
        [DataMember(Name="liked", EmitDefaultValue=false)]
        public bool Liked { get; set; }

        /// <summary>
        /// Array of likes for users who have liked this status.
        /// </summary>
        /// <value>Array of likes for users who have liked this status.</value>
        [DataMember(Name="likes", EmitDefaultValue=false)]
        public List<Like> Likes { get; private set; }

        /// <summary>
        /// The time at which this project status was last modified. *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*
        /// </summary>
        /// <value>The time at which this project status was last modified. *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*</value>
        [DataMember(Name="modified_at", EmitDefaultValue=false)]
        public DateTime ModifiedAt { get; private set; }

        /// <summary>
        /// *Deprecated - please use likes instead* The number of users who have hearted this status.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* The number of users who have hearted this status.</value>
        [DataMember(Name="num_hearts", EmitDefaultValue=false)]
        public int NumHearts { get; private set; }

        /// <summary>
        /// The number of users who have liked this status.
        /// </summary>
        /// <value>The number of users who have liked this status.</value>
        [DataMember(Name="num_likes", EmitDefaultValue=false)]
        public int NumLikes { get; private set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public ProjectCompact Parent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusUpdateResponseAllOf {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Hearted: ").Append(Hearted).Append("\n");
            sb.Append("  Hearts: ").Append(Hearts).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  NumHearts: ").Append(NumHearts).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatusUpdateResponseAllOf);
        }

        /// <summary>
        /// Returns true if StatusUpdateResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusUpdateResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusUpdateResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Hearted == input.Hearted ||
                    (this.Hearted != null &&
                    this.Hearted.Equals(input.Hearted))
                ) && 
                (
                    this.Hearts == input.Hearts ||
                    this.Hearts != null &&
                    input.Hearts != null &&
                    this.Hearts.SequenceEqual(input.Hearts)
                ) && 
                (
                    this.Liked == input.Liked ||
                    (this.Liked != null &&
                    this.Liked.Equals(input.Liked))
                ) && 
                (
                    this.Likes == input.Likes ||
                    this.Likes != null &&
                    input.Likes != null &&
                    this.Likes.SequenceEqual(input.Likes)
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.NumHearts == input.NumHearts ||
                    (this.NumHearts != null &&
                    this.NumHearts.Equals(input.NumHearts))
                ) && 
                (
                    this.NumLikes == input.NumLikes ||
                    (this.NumLikes != null &&
                    this.NumLikes.Equals(input.NumLikes))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Hearted != null)
                    hashCode = hashCode * 59 + this.Hearted.GetHashCode();
                if (this.Hearts != null)
                    hashCode = hashCode * 59 + this.Hearts.GetHashCode();
                if (this.Liked != null)
                    hashCode = hashCode * 59 + this.Liked.GetHashCode();
                if (this.Likes != null)
                    hashCode = hashCode * 59 + this.Likes.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                if (this.NumHearts != null)
                    hashCode = hashCode * 59 + this.NumHearts.GetHashCode();
                if (this.NumLikes != null)
                    hashCode = hashCode * 59 + this.NumLikes.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
