/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// AuditLogEventActor
    /// </summary>
    [DataContract]
    public partial class AuditLogEventActor :  IEquatable<AuditLogEventActor>, IValidatableObject
    {
        /// <summary>
        /// The type of actor. Can be one of &#x60;user&#x60;, &#x60;asana&#x60;, &#x60;asana_support&#x60;, &#x60;anonymous&#x60;, or &#x60;external_administrator&#x60;.
        /// </summary>
        /// <value>The type of actor. Can be one of &#x60;user&#x60;, &#x60;asana&#x60;, &#x60;asana_support&#x60;, &#x60;anonymous&#x60;, or &#x60;external_administrator&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActorTypeEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1,

            /// <summary>
            /// Enum Asana for value: asana
            /// </summary>
            [EnumMember(Value = "asana")]
            Asana = 2,

            /// <summary>
            /// Enum Asanasupport for value: asana_support
            /// </summary>
            [EnumMember(Value = "asana_support")]
            Asanasupport = 3,

            /// <summary>
            /// Enum Anonymous for value: anonymous
            /// </summary>
            [EnumMember(Value = "anonymous")]
            Anonymous = 4,

            /// <summary>
            /// Enum Externaladministrator for value: external_administrator
            /// </summary>
            [EnumMember(Value = "external_administrator")]
            Externaladministrator = 5

        }

        /// <summary>
        /// The type of actor. Can be one of &#x60;user&#x60;, &#x60;asana&#x60;, &#x60;asana_support&#x60;, &#x60;anonymous&#x60;, or &#x60;external_administrator&#x60;.
        /// </summary>
        /// <value>The type of actor. Can be one of &#x60;user&#x60;, &#x60;asana&#x60;, &#x60;asana_support&#x60;, &#x60;anonymous&#x60;, or &#x60;external_administrator&#x60;.</value>
        [DataMember(Name="actor_type", EmitDefaultValue=false)]
        public ActorTypeEnum? ActorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogEventActor" /> class.
        /// </summary>
        /// <param name="actorType">The type of actor. Can be one of &#x60;user&#x60;, &#x60;asana&#x60;, &#x60;asana_support&#x60;, &#x60;anonymous&#x60;, or &#x60;external_administrator&#x60;..</param>
        /// <param name="gid">Globally unique identifier of the actor, if it is a user..</param>
        /// <param name="name">The name of the actor, if it is a user..</param>
        /// <param name="email">The email of the actor, if it is a user..</param>
        public AuditLogEventActor(ActorTypeEnum? actorType = default(ActorTypeEnum?), string gid = default(string), string name = default(string), string email = default(string))
        {
            this.ActorType = actorType;
            this.Gid = gid;
            this.Name = name;
            this.Email = email;
        }


        /// <summary>
        /// Globally unique identifier of the actor, if it is a user.
        /// </summary>
        /// <value>Globally unique identifier of the actor, if it is a user.</value>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The name of the actor, if it is a user.
        /// </summary>
        /// <value>The name of the actor, if it is a user.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The email of the actor, if it is a user.
        /// </summary>
        /// <value>The email of the actor, if it is a user.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogEventActor {\n");
            sb.Append("  ActorType: ").Append(ActorType).Append("\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditLogEventActor);
        }

        /// <summary>
        /// Returns true if AuditLogEventActor instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditLogEventActor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogEventActor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActorType == input.ActorType ||
                    (this.ActorType != null &&
                    this.ActorType.Equals(input.ActorType))
                ) && 
                (
                    this.Gid == input.Gid ||
                    (this.Gid != null &&
                    this.Gid.Equals(input.Gid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActorType != null)
                    hashCode = hashCode * 59 + this.ActorType.GetHashCode();
                if (this.Gid != null)
                    hashCode = hashCode * 59 + this.Gid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
