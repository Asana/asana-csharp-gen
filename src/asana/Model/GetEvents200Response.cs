/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// The full record for all events that have occurred since the sync token was created.
    /// </summary>
    [DataContract]
    public partial class GetEvents200Response :  IEquatable<GetEvents200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEvents200Response" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="sync">A sync token to be used with the next call to the /events endpoint..</param>
        /// <param name="hasMore">Indicates whether there are more events to pull..</param>
        public GetEvents200Response(List<EventResponse> data = default(List<EventResponse>), string sync = default(string), bool hasMore = default(bool))
        {
            this.Data = data;
            this.Sync = sync;
            this.HasMore = hasMore;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<EventResponse> Data { get; set; }

        /// <summary>
        /// A sync token to be used with the next call to the /events endpoint.
        /// </summary>
        /// <value>A sync token to be used with the next call to the /events endpoint.</value>
        [DataMember(Name="sync", EmitDefaultValue=false)]
        public string Sync { get; set; }

        /// <summary>
        /// Indicates whether there are more events to pull.
        /// </summary>
        /// <value>Indicates whether there are more events to pull.</value>
        [DataMember(Name="has_more", EmitDefaultValue=false)]
        public bool HasMore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetEvents200Response {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Sync: ").Append(Sync).Append("\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetEvents200Response);
        }

        /// <summary>
        /// Returns true if GetEvents200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of GetEvents200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetEvents200Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Sync == input.Sync ||
                    (this.Sync != null &&
                    this.Sync.Equals(input.Sync))
                ) && 
                (
                    this.HasMore == input.HasMore ||
                    (this.HasMore != null &&
                    this.HasMore.Equals(input.HasMore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Sync != null)
                    hashCode = hashCode * 59 + this.Sync.GetHashCode();
                if (this.HasMore != null)
                    hashCode = hashCode * 59 + this.HasMore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
