/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// WebhookResponseAllOf
    /// </summary>
    [DataContract]
    public partial class WebhookResponseAllOf :  IEquatable<WebhookResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResponseAllOf" /> class.
        /// </summary>
        /// <param name="filters">Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server..</param>
        public WebhookResponseAllOf(List<WebhookFilter> filters = default(List<WebhookFilter>))
        {
            this.Filters = filters;
        }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// The timestamp when the webhook last received an error when sending an event to the target.
        /// </summary>
        /// <value>The timestamp when the webhook last received an error when sending an event to the target.</value>
        [DataMember(Name="last_failure_at", EmitDefaultValue=false)]
        public DateTime LastFailureAt { get; private set; }

        /// <summary>
        /// The contents of the last error response sent to the webhook when attempting to deliver events to the target.
        /// </summary>
        /// <value>The contents of the last error response sent to the webhook when attempting to deliver events to the target.</value>
        [DataMember(Name="last_failure_content", EmitDefaultValue=false)]
        public string LastFailureContent { get; private set; }

        /// <summary>
        /// The timestamp when the webhook last successfully sent an event to the target.
        /// </summary>
        /// <value>The timestamp when the webhook last successfully sent an event to the target.</value>
        [DataMember(Name="last_success_at", EmitDefaultValue=false)]
        public DateTime LastSuccessAt { get; private set; }

        /// <summary>
        /// Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
        /// </summary>
        /// <value>Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.</value>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<WebhookFilter> Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookResponseAllOf {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  LastFailureAt: ").Append(LastFailureAt).Append("\n");
            sb.Append("  LastFailureContent: ").Append(LastFailureContent).Append("\n");
            sb.Append("  LastSuccessAt: ").Append(LastSuccessAt).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookResponseAllOf);
        }

        /// <summary>
        /// Returns true if WebhookResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.LastFailureAt == input.LastFailureAt ||
                    (this.LastFailureAt != null &&
                    this.LastFailureAt.Equals(input.LastFailureAt))
                ) && 
                (
                    this.LastFailureContent == input.LastFailureContent ||
                    (this.LastFailureContent != null &&
                    this.LastFailureContent.Equals(input.LastFailureContent))
                ) && 
                (
                    this.LastSuccessAt == input.LastSuccessAt ||
                    (this.LastSuccessAt != null &&
                    this.LastSuccessAt.Equals(input.LastSuccessAt))
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.LastFailureAt != null)
                    hashCode = hashCode * 59 + this.LastFailureAt.GetHashCode();
                if (this.LastFailureContent != null)
                    hashCode = hashCode * 59 + this.LastFailureContent.GetHashCode();
                if (this.LastSuccessAt != null)
                    hashCode = hashCode * 59 + this.LastSuccessAt.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
