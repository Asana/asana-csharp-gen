/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [Custom Fields](/docs/asana-custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.  Users in Asana can [lock custom fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields), which will make them read-only when accessed by other users. Attempting to edit a locked custom field will return HTTP error code &#x60;403 Forbidden&#x60;.
    /// </summary>
    [DataContract]
    public partial class CustomFieldCompactAllOf :  IEquatable<CustomFieldCompactAllOf>, IValidatableObject
    {
        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum Multienum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            Multienum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6

        }

        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }
        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum Multienum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            Multienum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4

        }

        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldCompactAllOf" /> class.
        /// </summary>
        /// <param name="name">The name of the custom field..</param>
        /// <param name="resourceSubtype">The type of the custom field. Must be one of the given values. .</param>
        /// <param name="enumOptions">*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option)..</param>
        /// <param name="enabled">*Conditional*. Determines if the custom field is enabled or not..</param>
        /// <param name="dateValue">dateValue.</param>
        /// <param name="enumValue">enumValue.</param>
        /// <param name="multiEnumValues">*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field..</param>
        /// <param name="numberValue">*Conditional*. This number is the value of a &#x60;number&#x60; custom field..</param>
        /// <param name="textValue">*Conditional*. This string is the value of a &#x60;text&#x60; custom field..</param>
        public CustomFieldCompactAllOf(string name = default(string), ResourceSubtypeEnum? resourceSubtype = default(ResourceSubtypeEnum?), List<EnumOption> enumOptions = default(List<EnumOption>), bool enabled = default(bool), CustomFieldCompactAllOfDateValue dateValue = default(CustomFieldCompactAllOfDateValue), EnumOption enumValue = default(EnumOption), List<EnumOption> multiEnumValues = default(List<EnumOption>), decimal numberValue = default(decimal), string textValue = default(string))
        {
            this.Name = name;
            this.ResourceSubtype = resourceSubtype;
            this.EnumOptions = enumOptions;
            this.Enabled = enabled;
            this.DateValue = dateValue;
            this.EnumValue = enumValue;
            this.MultiEnumValues = multiEnumValues;
            this.NumberValue = numberValue;
            this.TextValue = textValue;
        }

        /// <summary>
        /// The name of the custom field.
        /// </summary>
        /// <value>The name of the custom field.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).</value>
        [DataMember(Name="enum_options", EmitDefaultValue=false)]
        public List<EnumOption> EnumOptions { get; set; }

        /// <summary>
        /// *Conditional*. Determines if the custom field is enabled or not.
        /// </summary>
        /// <value>*Conditional*. Determines if the custom field is enabled or not.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets DateValue
        /// </summary>
        [DataMember(Name="date_value", EmitDefaultValue=false)]
        public CustomFieldCompactAllOfDateValue DateValue { get; set; }

        /// <summary>
        /// Gets or Sets EnumValue
        /// </summary>
        [DataMember(Name="enum_value", EmitDefaultValue=false)]
        public EnumOption EnumValue { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.</value>
        [DataMember(Name="multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> MultiEnumValues { get; set; }

        /// <summary>
        /// *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This number is the value of a &#x60;number&#x60; custom field.</value>
        [DataMember(Name="number_value", EmitDefaultValue=false)]
        public decimal NumberValue { get; set; }

        /// <summary>
        /// *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This string is the value of a &#x60;text&#x60; custom field.</value>
        [DataMember(Name="text_value", EmitDefaultValue=false)]
        public string TextValue { get; set; }

        /// <summary>
        /// A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
        /// </summary>
        /// <value>A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.</value>
        [DataMember(Name="display_value", EmitDefaultValue=true)]
        public string DisplayValue { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldCompactAllOf {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EnumOptions: ").Append(EnumOptions).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  DateValue: ").Append(DateValue).Append("\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  MultiEnumValues: ").Append(MultiEnumValues).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFieldCompactAllOf);
        }

        /// <summary>
        /// Returns true if CustomFieldCompactAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFieldCompactAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldCompactAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResourceSubtype == input.ResourceSubtype ||
                    (this.ResourceSubtype != null &&
                    this.ResourceSubtype.Equals(input.ResourceSubtype))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EnumOptions == input.EnumOptions ||
                    this.EnumOptions != null &&
                    input.EnumOptions != null &&
                    this.EnumOptions.SequenceEqual(input.EnumOptions)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.DateValue == input.DateValue ||
                    (this.DateValue != null &&
                    this.DateValue.Equals(input.DateValue))
                ) && 
                (
                    this.EnumValue == input.EnumValue ||
                    (this.EnumValue != null &&
                    this.EnumValue.Equals(input.EnumValue))
                ) && 
                (
                    this.MultiEnumValues == input.MultiEnumValues ||
                    this.MultiEnumValues != null &&
                    input.MultiEnumValues != null &&
                    this.MultiEnumValues.SequenceEqual(input.MultiEnumValues)
                ) && 
                (
                    this.NumberValue == input.NumberValue ||
                    (this.NumberValue != null &&
                    this.NumberValue.Equals(input.NumberValue))
                ) && 
                (
                    this.TextValue == input.TextValue ||
                    (this.TextValue != null &&
                    this.TextValue.Equals(input.TextValue))
                ) && 
                (
                    this.DisplayValue == input.DisplayValue ||
                    (this.DisplayValue != null &&
                    this.DisplayValue.Equals(input.DisplayValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResourceSubtype != null)
                    hashCode = hashCode * 59 + this.ResourceSubtype.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EnumOptions != null)
                    hashCode = hashCode * 59 + this.EnumOptions.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.DateValue != null)
                    hashCode = hashCode * 59 + this.DateValue.GetHashCode();
                if (this.EnumValue != null)
                    hashCode = hashCode * 59 + this.EnumValue.GetHashCode();
                if (this.MultiEnumValues != null)
                    hashCode = hashCode * 59 + this.MultiEnumValues.GetHashCode();
                if (this.NumberValue != null)
                    hashCode = hashCode * 59 + this.NumberValue.GetHashCode();
                if (this.TextValue != null)
                    hashCode = hashCode * 59 + this.TextValue.GetHashCode();
                if (this.DisplayValue != null)
                    hashCode = hashCode * 59 + this.DisplayValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
