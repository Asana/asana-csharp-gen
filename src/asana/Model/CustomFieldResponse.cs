/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// CustomFieldResponse
    /// </summary>
    [DataContract]
    public partial class CustomFieldResponse :  IEquatable<CustomFieldResponse>, IValidatableObject
    {
        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum Multienum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            Multienum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6

        }

        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }
        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum Multienum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            Multienum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4

        }

        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The format of this custom field.
        /// </summary>
        /// <value>The format of this custom field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum Currency for value: currency
            /// </summary>
            [EnumMember(Value = "currency")]
            Currency = 1,

            /// <summary>
            /// Enum Identifier for value: identifier
            /// </summary>
            [EnumMember(Value = "identifier")]
            Identifier = 2,

            /// <summary>
            /// Enum Percentage for value: percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage = 3,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 4,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 5

        }

        /// <summary>
        /// The format of this custom field.
        /// </summary>
        /// <value>The format of this custom field.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomLabelPositionEnum
        {
            /// <summary>
            /// Enum Prefix for value: prefix
            /// </summary>
            [EnumMember(Value = "prefix")]
            Prefix = 1,

            /// <summary>
            /// Enum Suffix for value: suffix
            /// </summary>
            [EnumMember(Value = "suffix")]
            Suffix = 2

        }

        /// <summary>
        /// Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        [DataMember(Name="custom_label_position", EmitDefaultValue=false)]
        public CustomLabelPositionEnum? CustomLabelPosition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldResponse" /> class.
        /// </summary>
        /// <param name="name">The name of the custom field..</param>
        /// <param name="resourceSubtype">The type of the custom field. Must be one of the given values. .</param>
        /// <param name="enumOptions">*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option)..</param>
        /// <param name="enabled">*Conditional*. Determines if the custom field is enabled or not..</param>
        /// <param name="dateValue">dateValue.</param>
        /// <param name="enumValue">enumValue.</param>
        /// <param name="multiEnumValues">*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field..</param>
        /// <param name="numberValue">*Conditional*. This number is the value of a &#x60;number&#x60; custom field..</param>
        /// <param name="textValue">*Conditional*. This string is the value of a &#x60;text&#x60; custom field..</param>
        /// <param name="description">[Opt In](/docs/input-output-options). The description of the custom field..</param>
        /// <param name="precision">Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0..</param>
        /// <param name="format">The format of this custom field..</param>
        /// <param name="currencyCode">ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;..</param>
        /// <param name="customLabel">This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;..</param>
        /// <param name="customLabelPosition">Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;..</param>
        /// <param name="hasNotificationsEnabled">*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field..</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="peopleValue">*Conditional*. Only relevant for custom fields of type &#x60;people&#x60;. This array of [compact user](/docs/user-compact) objects reflects the values of a &#x60;people&#x60; custom field..</param>
        public CustomFieldResponse(string name = default(string), ResourceSubtypeEnum? resourceSubtype = default(ResourceSubtypeEnum?), List<EnumOption> enumOptions = default(List<EnumOption>), bool enabled = default(bool), CustomFieldCompactAllOfDateValue dateValue = default(CustomFieldCompactAllOfDateValue), EnumOption enumValue = default(EnumOption), List<EnumOption> multiEnumValues = default(List<EnumOption>), decimal numberValue = default(decimal), string textValue = default(string), string description = default(string), int precision = default(int), FormatEnum? format = default(FormatEnum?), string currencyCode = default(string), string customLabel = default(string), CustomLabelPositionEnum? customLabelPosition = default(CustomLabelPositionEnum?), bool hasNotificationsEnabled = default(bool), UserCompact createdBy = default(UserCompact), List<UserCompact> peopleValue = default(List<UserCompact>))
        {
            this.CurrencyCode = currencyCode;
            this.CustomLabel = customLabel;
            this.Name = name;
            this.ResourceSubtype = resourceSubtype;
            this.EnumOptions = enumOptions;
            this.Enabled = enabled;
            this.DateValue = dateValue;
            this.EnumValue = enumValue;
            this.MultiEnumValues = multiEnumValues;
            this.NumberValue = numberValue;
            this.TextValue = textValue;
            this.Description = description;
            this.Precision = precision;
            this.Format = format;
            this.CurrencyCode = currencyCode;
            this.CustomLabel = customLabel;
            this.CustomLabelPosition = customLabelPosition;
            this.HasNotificationsEnabled = hasNotificationsEnabled;
            this.CreatedBy = createdBy;
            this.PeopleValue = peopleValue;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; private set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// The name of the custom field.
        /// </summary>
        /// <value>The name of the custom field.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).</value>
        [DataMember(Name="enum_options", EmitDefaultValue=false)]
        public List<EnumOption> EnumOptions { get; set; }

        /// <summary>
        /// *Conditional*. Determines if the custom field is enabled or not.
        /// </summary>
        /// <value>*Conditional*. Determines if the custom field is enabled or not.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets DateValue
        /// </summary>
        [DataMember(Name="date_value", EmitDefaultValue=false)]
        public CustomFieldCompactAllOfDateValue DateValue { get; set; }

        /// <summary>
        /// Gets or Sets EnumValue
        /// </summary>
        [DataMember(Name="enum_value", EmitDefaultValue=false)]
        public EnumOption EnumValue { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.</value>
        [DataMember(Name="multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> MultiEnumValues { get; set; }

        /// <summary>
        /// *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This number is the value of a &#x60;number&#x60; custom field.</value>
        [DataMember(Name="number_value", EmitDefaultValue=false)]
        public decimal NumberValue { get; set; }

        /// <summary>
        /// *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This string is the value of a &#x60;text&#x60; custom field.</value>
        [DataMember(Name="text_value", EmitDefaultValue=false)]
        public string TextValue { get; set; }

        /// <summary>
        /// A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
        /// </summary>
        /// <value>A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.</value>
        [DataMember(Name="display_value", EmitDefaultValue=true)]
        public string DisplayValue { get; private set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The description of the custom field.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The description of the custom field.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0.
        /// </summary>
        /// <value>Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0.</value>
        [DataMember(Name="precision", EmitDefaultValue=false)]
        public int Precision { get; set; }


        /// <summary>
        /// ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;.
        /// </summary>
        /// <value>ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;.</value>
        [DataMember(Name="currency_code", EmitDefaultValue=true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        [DataMember(Name="custom_label", EmitDefaultValue=true)]
        public string CustomLabel { get; set; }


        /// <summary>
        /// This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.
        /// </summary>
        /// <value>This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.</value>
        [DataMember(Name="is_global_to_workspace", EmitDefaultValue=false)]
        public bool IsGlobalToWorkspace { get; private set; }

        /// <summary>
        /// *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.
        /// </summary>
        /// <value>*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.</value>
        [DataMember(Name="has_notifications_enabled", EmitDefaultValue=false)]
        public bool HasNotificationsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public UserCompact CreatedBy { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;people&#x60;. This array of [compact user](/docs/user-compact) objects reflects the values of a &#x60;people&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;people&#x60;. This array of [compact user](/docs/user-compact) objects reflects the values of a &#x60;people&#x60; custom field.</value>
        [DataMember(Name="people_value", EmitDefaultValue=false)]
        public List<UserCompact> PeopleValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EnumOptions: ").Append(EnumOptions).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  DateValue: ").Append(DateValue).Append("\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  MultiEnumValues: ").Append(MultiEnumValues).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomLabel: ").Append(CustomLabel).Append("\n");
            sb.Append("  CustomLabelPosition: ").Append(CustomLabelPosition).Append("\n");
            sb.Append("  IsGlobalToWorkspace: ").Append(IsGlobalToWorkspace).Append("\n");
            sb.Append("  HasNotificationsEnabled: ").Append(HasNotificationsEnabled).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  PeopleValue: ").Append(PeopleValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFieldResponse);
        }

        /// <summary>
        /// Returns true if CustomFieldResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFieldResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gid == input.Gid ||
                    (this.Gid != null &&
                    this.Gid.Equals(input.Gid))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResourceSubtype == input.ResourceSubtype ||
                    (this.ResourceSubtype != null &&
                    this.ResourceSubtype.Equals(input.ResourceSubtype))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EnumOptions == input.EnumOptions ||
                    this.EnumOptions != null &&
                    input.EnumOptions != null &&
                    this.EnumOptions.SequenceEqual(input.EnumOptions)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.DateValue == input.DateValue ||
                    (this.DateValue != null &&
                    this.DateValue.Equals(input.DateValue))
                ) && 
                (
                    this.EnumValue == input.EnumValue ||
                    (this.EnumValue != null &&
                    this.EnumValue.Equals(input.EnumValue))
                ) && 
                (
                    this.MultiEnumValues == input.MultiEnumValues ||
                    this.MultiEnumValues != null &&
                    input.MultiEnumValues != null &&
                    this.MultiEnumValues.SequenceEqual(input.MultiEnumValues)
                ) && 
                (
                    this.NumberValue == input.NumberValue ||
                    (this.NumberValue != null &&
                    this.NumberValue.Equals(input.NumberValue))
                ) && 
                (
                    this.TextValue == input.TextValue ||
                    (this.TextValue != null &&
                    this.TextValue.Equals(input.TextValue))
                ) && 
                (
                    this.DisplayValue == input.DisplayValue ||
                    (this.DisplayValue != null &&
                    this.DisplayValue.Equals(input.DisplayValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Precision == input.Precision ||
                    (this.Precision != null &&
                    this.Precision.Equals(input.Precision))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CustomLabel == input.CustomLabel ||
                    (this.CustomLabel != null &&
                    this.CustomLabel.Equals(input.CustomLabel))
                ) && 
                (
                    this.CustomLabelPosition == input.CustomLabelPosition ||
                    (this.CustomLabelPosition != null &&
                    this.CustomLabelPosition.Equals(input.CustomLabelPosition))
                ) && 
                (
                    this.IsGlobalToWorkspace == input.IsGlobalToWorkspace ||
                    (this.IsGlobalToWorkspace != null &&
                    this.IsGlobalToWorkspace.Equals(input.IsGlobalToWorkspace))
                ) && 
                (
                    this.HasNotificationsEnabled == input.HasNotificationsEnabled ||
                    (this.HasNotificationsEnabled != null &&
                    this.HasNotificationsEnabled.Equals(input.HasNotificationsEnabled))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.PeopleValue == input.PeopleValue ||
                    this.PeopleValue != null &&
                    input.PeopleValue != null &&
                    this.PeopleValue.SequenceEqual(input.PeopleValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gid != null)
                    hashCode = hashCode * 59 + this.Gid.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResourceSubtype != null)
                    hashCode = hashCode * 59 + this.ResourceSubtype.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EnumOptions != null)
                    hashCode = hashCode * 59 + this.EnumOptions.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.DateValue != null)
                    hashCode = hashCode * 59 + this.DateValue.GetHashCode();
                if (this.EnumValue != null)
                    hashCode = hashCode * 59 + this.EnumValue.GetHashCode();
                if (this.MultiEnumValues != null)
                    hashCode = hashCode * 59 + this.MultiEnumValues.GetHashCode();
                if (this.NumberValue != null)
                    hashCode = hashCode * 59 + this.NumberValue.GetHashCode();
                if (this.TextValue != null)
                    hashCode = hashCode * 59 + this.TextValue.GetHashCode();
                if (this.DisplayValue != null)
                    hashCode = hashCode * 59 + this.DisplayValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Precision != null)
                    hashCode = hashCode * 59 + this.Precision.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.CustomLabel != null)
                    hashCode = hashCode * 59 + this.CustomLabel.GetHashCode();
                if (this.CustomLabelPosition != null)
                    hashCode = hashCode * 59 + this.CustomLabelPosition.GetHashCode();
                if (this.IsGlobalToWorkspace != null)
                    hashCode = hashCode * 59 + this.IsGlobalToWorkspace.GetHashCode();
                if (this.HasNotificationsEnabled != null)
                    hashCode = hashCode * 59 + this.HasNotificationsEnabled.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.PeopleValue != null)
                    hashCode = hashCode * 59 + this.PeopleValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
