/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// StatusUpdateBaseAllOf
    /// </summary>
    [DataContract]
    public partial class StatusUpdateBaseAllOf :  IEquatable<StatusUpdateBaseAllOf>, IValidatableObject
    {
        /// <summary>
        /// The type associated with the status update. This represents the current state of the object this object is on.
        /// </summary>
        /// <value>The type associated with the status update. This represents the current state of the object this object is on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusTypeEnum
        {
            /// <summary>
            /// Enum Ontrack for value: on_track
            /// </summary>
            [EnumMember(Value = "on_track")]
            Ontrack = 1,

            /// <summary>
            /// Enum Atrisk for value: at_risk
            /// </summary>
            [EnumMember(Value = "at_risk")]
            Atrisk = 2,

            /// <summary>
            /// Enum Offtrack for value: off_track
            /// </summary>
            [EnumMember(Value = "off_track")]
            Offtrack = 3,

            /// <summary>
            /// Enum Onhold for value: on_hold
            /// </summary>
            [EnumMember(Value = "on_hold")]
            Onhold = 4,

            /// <summary>
            /// Enum Complete for value: complete
            /// </summary>
            [EnumMember(Value = "complete")]
            Complete = 5,

            /// <summary>
            /// Enum Achieved for value: achieved
            /// </summary>
            [EnumMember(Value = "achieved")]
            Achieved = 6,

            /// <summary>
            /// Enum Partial for value: partial
            /// </summary>
            [EnumMember(Value = "partial")]
            Partial = 7,

            /// <summary>
            /// Enum Missed for value: missed
            /// </summary>
            [EnumMember(Value = "missed")]
            Missed = 8,

            /// <summary>
            /// Enum Dropped for value: dropped
            /// </summary>
            [EnumMember(Value = "dropped")]
            Dropped = 9

        }

        /// <summary>
        /// The type associated with the status update. This represents the current state of the object this object is on.
        /// </summary>
        /// <value>The type associated with the status update. This represents the current state of the object this object is on.</value>
        [DataMember(Name="status_type", EmitDefaultValue=true)]
        public StatusTypeEnum StatusType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateBaseAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatusUpdateBaseAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateBaseAllOf" /> class.
        /// </summary>
        /// <param name="text">The text content of the status update. (required).</param>
        /// <param name="htmlText">[Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML..</param>
        /// <param name="statusType">The type associated with the status update. This represents the current state of the object this object is on. (required).</param>
        public StatusUpdateBaseAllOf(string text = default(string), string htmlText = default(string), StatusTypeEnum statusType = default(StatusTypeEnum))
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for StatusUpdateBaseAllOf and cannot be null");
            }
            else
            {
                this.Text = text;
            }

            // to ensure "statusType" is required (not null)
            if (statusType == null)
            {
                throw new InvalidDataException("statusType is a required property for StatusUpdateBaseAllOf and cannot be null");
            }
            else
            {
                this.StatusType = statusType;
            }

            this.HtmlText = htmlText;
        }

        /// <summary>
        /// The text content of the status update.
        /// </summary>
        /// <value>The text content of the status update.</value>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.</value>
        [DataMember(Name="html_text", EmitDefaultValue=false)]
        public string HtmlText { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusUpdateBaseAllOf {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatusUpdateBaseAllOf);
        }

        /// <summary>
        /// Returns true if StatusUpdateBaseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusUpdateBaseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusUpdateBaseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.HtmlText == input.HtmlText ||
                    (this.HtmlText != null &&
                    this.HtmlText.Equals(input.HtmlText))
                ) && 
                (
                    this.StatusType == input.StatusType ||
                    (this.StatusType != null &&
                    this.StatusType.Equals(input.StatusType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.HtmlText != null)
                    hashCode = hashCode * 59 + this.HtmlText.GetHashCode();
                if (this.StatusType != null)
                    hashCode = hashCode * 59 + this.StatusType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
