/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// A response object returned from the task count endpoint.
    /// </summary>
    [DataContract]
    public partial class TaskCountResponse :  IEquatable<TaskCountResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCountResponse" /> class.
        /// </summary>
        /// <param name="numTasks">The number of tasks in a project..</param>
        /// <param name="numIncompleteTasks">The number of incomplete tasks in a project..</param>
        /// <param name="numCompletedTasks">The number of completed tasks in a project..</param>
        /// <param name="numMilestones">The number of milestones in a project..</param>
        /// <param name="numIncompleteMilestones">The number of incomplete milestones in a project..</param>
        /// <param name="numCompletedMilestones">The number of completed milestones in a project..</param>
        public TaskCountResponse(int numTasks = default(int), int numIncompleteTasks = default(int), int numCompletedTasks = default(int), int numMilestones = default(int), int numIncompleteMilestones = default(int), int numCompletedMilestones = default(int))
        {
            this.NumTasks = numTasks;
            this.NumIncompleteTasks = numIncompleteTasks;
            this.NumCompletedTasks = numCompletedTasks;
            this.NumMilestones = numMilestones;
            this.NumIncompleteMilestones = numIncompleteMilestones;
            this.NumCompletedMilestones = numCompletedMilestones;
        }

        /// <summary>
        /// The number of tasks in a project.
        /// </summary>
        /// <value>The number of tasks in a project.</value>
        [DataMember(Name="num_tasks", EmitDefaultValue=false)]
        public int NumTasks { get; set; }

        /// <summary>
        /// The number of incomplete tasks in a project.
        /// </summary>
        /// <value>The number of incomplete tasks in a project.</value>
        [DataMember(Name="num_incomplete_tasks", EmitDefaultValue=false)]
        public int NumIncompleteTasks { get; set; }

        /// <summary>
        /// The number of completed tasks in a project.
        /// </summary>
        /// <value>The number of completed tasks in a project.</value>
        [DataMember(Name="num_completed_tasks", EmitDefaultValue=false)]
        public int NumCompletedTasks { get; set; }

        /// <summary>
        /// The number of milestones in a project.
        /// </summary>
        /// <value>The number of milestones in a project.</value>
        [DataMember(Name="num_milestones", EmitDefaultValue=false)]
        public int NumMilestones { get; set; }

        /// <summary>
        /// The number of incomplete milestones in a project.
        /// </summary>
        /// <value>The number of incomplete milestones in a project.</value>
        [DataMember(Name="num_incomplete_milestones", EmitDefaultValue=false)]
        public int NumIncompleteMilestones { get; set; }

        /// <summary>
        /// The number of completed milestones in a project.
        /// </summary>
        /// <value>The number of completed milestones in a project.</value>
        [DataMember(Name="num_completed_milestones", EmitDefaultValue=false)]
        public int NumCompletedMilestones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskCountResponse {\n");
            sb.Append("  NumTasks: ").Append(NumTasks).Append("\n");
            sb.Append("  NumIncompleteTasks: ").Append(NumIncompleteTasks).Append("\n");
            sb.Append("  NumCompletedTasks: ").Append(NumCompletedTasks).Append("\n");
            sb.Append("  NumMilestones: ").Append(NumMilestones).Append("\n");
            sb.Append("  NumIncompleteMilestones: ").Append(NumIncompleteMilestones).Append("\n");
            sb.Append("  NumCompletedMilestones: ").Append(NumCompletedMilestones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskCountResponse);
        }

        /// <summary>
        /// Returns true if TaskCountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskCountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskCountResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumTasks == input.NumTasks ||
                    (this.NumTasks != null &&
                    this.NumTasks.Equals(input.NumTasks))
                ) && 
                (
                    this.NumIncompleteTasks == input.NumIncompleteTasks ||
                    (this.NumIncompleteTasks != null &&
                    this.NumIncompleteTasks.Equals(input.NumIncompleteTasks))
                ) && 
                (
                    this.NumCompletedTasks == input.NumCompletedTasks ||
                    (this.NumCompletedTasks != null &&
                    this.NumCompletedTasks.Equals(input.NumCompletedTasks))
                ) && 
                (
                    this.NumMilestones == input.NumMilestones ||
                    (this.NumMilestones != null &&
                    this.NumMilestones.Equals(input.NumMilestones))
                ) && 
                (
                    this.NumIncompleteMilestones == input.NumIncompleteMilestones ||
                    (this.NumIncompleteMilestones != null &&
                    this.NumIncompleteMilestones.Equals(input.NumIncompleteMilestones))
                ) && 
                (
                    this.NumCompletedMilestones == input.NumCompletedMilestones ||
                    (this.NumCompletedMilestones != null &&
                    this.NumCompletedMilestones.Equals(input.NumCompletedMilestones))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumTasks != null)
                    hashCode = hashCode * 59 + this.NumTasks.GetHashCode();
                if (this.NumIncompleteTasks != null)
                    hashCode = hashCode * 59 + this.NumIncompleteTasks.GetHashCode();
                if (this.NumCompletedTasks != null)
                    hashCode = hashCode * 59 + this.NumCompletedTasks.GetHashCode();
                if (this.NumMilestones != null)
                    hashCode = hashCode * 59 + this.NumMilestones.GetHashCode();
                if (this.NumIncompleteMilestones != null)
                    hashCode = hashCode * 59 + this.NumIncompleteMilestones.GetHashCode();
                if (this.NumCompletedMilestones != null)
                    hashCode = hashCode * 59 + this.NumCompletedMilestones.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
