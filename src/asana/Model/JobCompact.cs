/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = asana.Client.OpenAPIDateConverter;

namespace asana.Model
{
    /// <summary>
    /// JobCompact
    /// </summary>
    [DataContract]
    public partial class JobCompact :  IEquatable<JobCompact>, IValidatableObject
    {
        /// <summary>
        /// The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.
        /// </summary>
        /// <value>The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Notstarted for value: not_started
            /// </summary>
            [EnumMember(Value = "not_started")]
            Notstarted = 1,

            /// <summary>
            /// Enum Inprogress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            Inprogress = 2,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4

        }

        /// <summary>
        /// The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.
        /// </summary>
        /// <value>The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobCompact" /> class.
        /// </summary>
        /// <param name="newProject">newProject.</param>
        /// <param name="newTask">newTask.</param>
        /// <param name="newProjectTemplate">newProjectTemplate.</param>
        public JobCompact(ProjectCompact newProject = default(ProjectCompact), TaskCompact newTask = default(TaskCompact), ProjectTemplateCompact newProjectTemplate = default(ProjectTemplateCompact))
        {
            this.NewProject = newProject;
            this.NewTask = newTask;
            this.NewProjectTemplate = newProjectTemplate;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; private set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public string ResourceSubtype { get; private set; }


        /// <summary>
        /// Gets or Sets NewProject
        /// </summary>
        [DataMember(Name="new_project", EmitDefaultValue=false)]
        public ProjectCompact NewProject { get; set; }

        /// <summary>
        /// Gets or Sets NewTask
        /// </summary>
        [DataMember(Name="new_task", EmitDefaultValue=false)]
        public TaskCompact NewTask { get; set; }

        /// <summary>
        /// Gets or Sets NewProjectTemplate
        /// </summary>
        [DataMember(Name="new_project_template", EmitDefaultValue=false)]
        public ProjectTemplateCompact NewProjectTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobCompact {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NewProject: ").Append(NewProject).Append("\n");
            sb.Append("  NewTask: ").Append(NewTask).Append("\n");
            sb.Append("  NewProjectTemplate: ").Append(NewProjectTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobCompact);
        }

        /// <summary>
        /// Returns true if JobCompact instances are equal
        /// </summary>
        /// <param name="input">Instance of JobCompact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobCompact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gid == input.Gid ||
                    (this.Gid != null &&
                    this.Gid.Equals(input.Gid))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.ResourceSubtype == input.ResourceSubtype ||
                    (this.ResourceSubtype != null &&
                    this.ResourceSubtype.Equals(input.ResourceSubtype))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.NewProject == input.NewProject ||
                    (this.NewProject != null &&
                    this.NewProject.Equals(input.NewProject))
                ) && 
                (
                    this.NewTask == input.NewTask ||
                    (this.NewTask != null &&
                    this.NewTask.Equals(input.NewTask))
                ) && 
                (
                    this.NewProjectTemplate == input.NewProjectTemplate ||
                    (this.NewProjectTemplate != null &&
                    this.NewProjectTemplate.Equals(input.NewProjectTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gid != null)
                    hashCode = hashCode * 59 + this.Gid.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.ResourceSubtype != null)
                    hashCode = hashCode * 59 + this.ResourceSubtype.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.NewProject != null)
                    hashCode = hashCode * 59 + this.NewProject.GetHashCode();
                if (this.NewTask != null)
                    hashCode = hashCode * 59 + this.NewTask.GetHashCode();
                if (this.NewProjectTemplate != null)
                    hashCode = hashCode * 59 + this.NewProjectTemplate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
