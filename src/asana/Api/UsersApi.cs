/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using asana.Client;
using asana.Model;

namespace asana.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a user's favorites
        /// </summary>
        /// <remarks>
        /// Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetFavoritesForUser200Response</returns>
        GetFavoritesForUser200Response GetFavoritesForUser (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Get a user's favorites
        /// </summary>
        /// <remarks>
        /// Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetFavoritesForUser200Response</returns>
        ApiResponse<GetFavoritesForUser200Response> GetFavoritesForUserWithHttpInfo (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Returns the full user record for the single user with the provided ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetUser200Response</returns>
        GetUser200Response GetUser (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Returns the full user record for the single user with the provided ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetUser200Response</returns>
        ApiResponse<GetUser200Response> GetUserWithHttpInfo (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get multiple users
        /// </summary>
        /// <remarks>
        /// Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetUsers200Response</returns>
        GetUsers200Response GetUsers (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));

        /// <summary>
        /// Get multiple users
        /// </summary>
        /// <remarks>
        /// Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetUsers200Response</returns>
        ApiResponse<GetUsers200Response> GetUsersWithHttpInfo (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));
        /// <summary>
        /// Get users in a team
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetUsers200Response</returns>
        GetUsers200Response GetUsersForTeam (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string));

        /// <summary>
        /// Get users in a team
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetUsers200Response</returns>
        ApiResponse<GetUsers200Response> GetUsersForTeamWithHttpInfo (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string));
        /// <summary>
        /// Get users in a workspace or organization
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetUsers200Response</returns>
        GetUsers200Response GetUsersForWorkspace (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string));

        /// <summary>
        /// Get users in a workspace or organization
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetUsers200Response</returns>
        ApiResponse<GetUsers200Response> GetUsersForWorkspaceWithHttpInfo (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a user's favorites
        /// </summary>
        /// <remarks>
        /// Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFavoritesForUser200Response</returns>
        System.Threading.Tasks.Task<GetFavoritesForUser200Response> GetFavoritesForUserAsync (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a user&#39;s favorites
        /// </summary>
        /// <remarks>
        /// Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFavoritesForUser200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFavoritesForUser200Response>> GetFavoritesForUserWithHttpInfoAsync (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Returns the full user record for the single user with the provided ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUser200Response</returns>
        System.Threading.Tasks.Task<GetUser200Response> GetUserAsync (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Returns the full user record for the single user with the provided ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUser200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUser200Response>> GetUserWithHttpInfoAsync (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multiple users
        /// </summary>
        /// <remarks>
        /// Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUsers200Response</returns>
        System.Threading.Tasks.Task<GetUsers200Response> GetUsersAsync (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get multiple users
        /// </summary>
        /// <remarks>
        /// Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUsers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsers200Response>> GetUsersWithHttpInfoAsync (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get users in a team
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUsers200Response</returns>
        System.Threading.Tasks.Task<GetUsers200Response> GetUsersForTeamAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get users in a team
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUsers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsers200Response>> GetUsersForTeamWithHttpInfoAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get users in a workspace or organization
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUsers200Response</returns>
        System.Threading.Tasks.Task<GetUsers200Response> GetUsersForWorkspaceAsync (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get users in a workspace or organization
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUsers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsers200Response>> GetUsersForWorkspaceWithHttpInfoAsync (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private asana.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new asana.Client.Configuration { BasePath = basePath };

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = asana.Client.Configuration.Default;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(asana.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = asana.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public asana.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public asana.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a user's favorites Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetFavoritesForUser200Response</returns>
        public GetFavoritesForUser200Response GetFavoritesForUser (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetFavoritesForUser200Response> localVarResponse = GetFavoritesForUserWithHttpInfo(userGid, resourceType, workspace, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user's favorites Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetFavoritesForUser200Response</returns>
        public ApiResponse<GetFavoritesForUser200Response> GetFavoritesForUserWithHttpInfo (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
                throw new ApiException(400, "Missing required parameter 'userGid' when calling UsersApi->GetFavoritesForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling UsersApi->GetFavoritesForUser");
            // verify the required parameter 'workspace' is set
            if (workspace == null)
                throw new ApiException(400, "Missing required parameter 'workspace' when calling UsersApi->GetFavoritesForUser");

            var localVarPath = "/users/{user_gid}/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGid != null) localVarPathParams.Add("user_gid", this.Configuration.ApiClient.ParameterToString(userGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_type", resourceType)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoritesForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavoritesForUser200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFavoritesForUser200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavoritesForUser200Response)));
        }

        /// <summary>
        /// Get a user's favorites Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFavoritesForUser200Response</returns>
        public async System.Threading.Tasks.Task<GetFavoritesForUser200Response> GetFavoritesForUserAsync (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetFavoritesForUser200Response> localVarResponse = await GetFavoritesForUserWithHttpInfoAsync(userGid, resourceType, workspace, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user's favorites Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="resourceType">The resource type of favorites to be returned.</param>
        /// <param name="workspace">The workspace in which to get favorites.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFavoritesForUser200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFavoritesForUser200Response>> GetFavoritesForUserWithHttpInfoAsync (string userGid, string resourceType, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
                throw new ApiException(400, "Missing required parameter 'userGid' when calling UsersApi->GetFavoritesForUser");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling UsersApi->GetFavoritesForUser");
            // verify the required parameter 'workspace' is set
            if (workspace == null)
                throw new ApiException(400, "Missing required parameter 'workspace' when calling UsersApi->GetFavoritesForUser");

            var localVarPath = "/users/{user_gid}/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGid != null) localVarPathParams.Add("user_gid", this.Configuration.ApiClient.ParameterToString(userGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_type", resourceType)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavoritesForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavoritesForUser200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFavoritesForUser200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavoritesForUser200Response)));
        }

        /// <summary>
        /// Get a user Returns the full user record for the single user with the provided ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetUser200Response</returns>
        public GetUser200Response GetUser (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetUser200Response> localVarResponse = GetUserWithHttpInfo(userGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user Returns the full user record for the single user with the provided ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetUser200Response</returns>
        public ApiResponse<GetUser200Response> GetUserWithHttpInfo (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
                throw new ApiException(400, "Missing required parameter 'userGid' when calling UsersApi->GetUser");

            var localVarPath = "/users/{user_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGid != null) localVarPathParams.Add("user_gid", this.Configuration.ApiClient.ParameterToString(userGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUser200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUser200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUser200Response)));
        }

        /// <summary>
        /// Get a user Returns the full user record for the single user with the provided ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUser200Response</returns>
        public async System.Threading.Tasks.Task<GetUser200Response> GetUserAsync (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetUser200Response> localVarResponse = await GetUserWithHttpInfoAsync(userGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user Returns the full user record for the single user with the provided ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUser200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUser200Response>> GetUserWithHttpInfoAsync (string userGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
                throw new ApiException(400, "Missing required parameter 'userGid' when calling UsersApi->GetUser");

            var localVarPath = "/users/{user_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGid != null) localVarPathParams.Add("user_gid", this.Configuration.ApiClient.ParameterToString(userGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUser200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUser200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUser200Response)));
        }

        /// <summary>
        /// Get multiple users Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetUsers200Response</returns>
        public GetUsers200Response GetUsers (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
             ApiResponse<GetUsers200Response> localVarResponse = GetUsersWithHttpInfo(workspace, team, optPretty, optFields, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple users Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetUsers200Response</returns>
        public ApiResponse<GetUsers200Response> GetUsersWithHttpInfo (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsers200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUsers200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsers200Response)));
        }

        /// <summary>
        /// Get multiple users Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUsers200Response</returns>
        public async System.Threading.Tasks.Task<GetUsers200Response> GetUsersAsync (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetUsers200Response> localVarResponse = await GetUsersWithHttpInfoAsync(workspace, team, optPretty, optFields, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multiple users Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization ID to filter users on. (optional)</param>
        /// <param name="team">The team ID to filter users on. (optional)</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUsers200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsers200Response>> GetUsersWithHttpInfoAsync (string workspace = default(string), string team = default(string), bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsers200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUsers200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsers200Response)));
        }

        /// <summary>
        /// Get users in a team Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetUsers200Response</returns>
        public GetUsers200Response GetUsersForTeam (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string))
        {
             ApiResponse<GetUsers200Response> localVarResponse = GetUsersForTeamWithHttpInfo(teamGid, optPretty, optFields, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users in a team Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetUsers200Response</returns>
        public ApiResponse<GetUsers200Response> GetUsersForTeamWithHttpInfo (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string))
        {
            // verify the required parameter 'teamGid' is set
            if (teamGid == null)
                throw new ApiException(400, "Missing required parameter 'teamGid' when calling UsersApi->GetUsersForTeam");

            var localVarPath = "/teams/{team_gid}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamGid != null) localVarPathParams.Add("team_gid", this.Configuration.ApiClient.ParameterToString(teamGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsers200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUsers200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsers200Response)));
        }

        /// <summary>
        /// Get users in a team Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUsers200Response</returns>
        public async System.Threading.Tasks.Task<GetUsers200Response> GetUsersForTeamAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetUsers200Response> localVarResponse = await GetUsersForTeamWithHttpInfoAsync(teamGid, optPretty, optFields, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users in a team Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUsers200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsers200Response>> GetUsersForTeamWithHttpInfoAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamGid' is set
            if (teamGid == null)
                throw new ApiException(400, "Missing required parameter 'teamGid' when calling UsersApi->GetUsersForTeam");

            var localVarPath = "/teams/{team_gid}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamGid != null) localVarPathParams.Add("team_gid", this.Configuration.ApiClient.ParameterToString(teamGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsers200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUsers200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsers200Response)));
        }

        /// <summary>
        /// Get users in a workspace or organization Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetUsers200Response</returns>
        public GetUsers200Response GetUsersForWorkspace (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string))
        {
             ApiResponse<GetUsers200Response> localVarResponse = GetUsersForWorkspaceWithHttpInfo(workspaceGid, optPretty, optFields, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users in a workspace or organization Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetUsers200Response</returns>
        public ApiResponse<GetUsers200Response> GetUsersForWorkspaceWithHttpInfo (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string))
        {
            // verify the required parameter 'workspaceGid' is set
            if (workspaceGid == null)
                throw new ApiException(400, "Missing required parameter 'workspaceGid' when calling UsersApi->GetUsersForWorkspace");

            var localVarPath = "/workspaces/{workspace_gid}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceGid != null) localVarPathParams.Add("workspace_gid", this.Configuration.ApiClient.ParameterToString(workspaceGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsers200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUsers200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsers200Response)));
        }

        /// <summary>
        /// Get users in a workspace or organization Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetUsers200Response</returns>
        public async System.Threading.Tasks.Task<GetUsers200Response> GetUsersForWorkspaceAsync (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetUsers200Response> localVarResponse = await GetUsersForWorkspaceWithHttpInfoAsync(workspaceGid, optPretty, optFields, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users in a workspace or organization Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetUsers200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsers200Response>> GetUsersForWorkspaceWithHttpInfoAsync (string workspaceGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'workspaceGid' is set
            if (workspaceGid == null)
                throw new ApiException(400, "Missing required parameter 'workspaceGid' when calling UsersApi->GetUsersForWorkspace");

            var localVarPath = "/workspaces/{workspace_gid}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceGid != null) localVarPathParams.Add("workspace_gid", this.Configuration.ApiClient.ParameterToString(workspaceGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsers200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUsers200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsers200Response)));
        }

    }
}
