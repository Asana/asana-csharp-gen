/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using asana.Client;
using asana.Model;

namespace asana.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Establish a webhook
        /// </summary>
        /// <remarks>
        /// Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>CreateWebhook201Response</returns>
        CreateWebhook201Response CreateWebhook (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Establish a webhook
        /// </summary>
        /// <remarks>
        /// Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of CreateWebhook201Response</returns>
        ApiResponse<CreateWebhook201Response> CreateWebhookWithHttpInfo (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response DeleteWebhook (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> DeleteWebhookWithHttpInfo (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Returns the full record for the given webhook.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>CreateWebhook201Response</returns>
        CreateWebhook201Response GetWebhook (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Returns the full record for the given webhook.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of CreateWebhook201Response</returns>
        ApiResponse<CreateWebhook201Response> GetWebhookWithHttpInfo (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get multiple webhooks
        /// </summary>
        /// <remarks>
        /// Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <returns>GetWebhooks200Response</returns>
        GetWebhooks200Response GetWebhooks (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string));

        /// <summary>
        /// Get multiple webhooks
        /// </summary>
        /// <remarks>
        /// Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <returns>ApiResponse of GetWebhooks200Response</returns>
        ApiResponse<GetWebhooks200Response> GetWebhooksWithHttpInfo (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string));
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>CreateWebhook201Response</returns>
        CreateWebhook201Response UpdateWebhook (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of CreateWebhook201Response</returns>
        ApiResponse<CreateWebhook201Response> UpdateWebhookWithHttpInfo (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Establish a webhook
        /// </summary>
        /// <remarks>
        /// Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWebhook201Response</returns>
        System.Threading.Tasks.Task<CreateWebhook201Response> CreateWebhookAsync (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Establish a webhook
        /// </summary>
        /// <remarks>
        /// Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWebhook201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebhook201Response>> CreateWebhookWithHttpInfoAsync (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> DeleteWebhookAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> DeleteWebhookWithHttpInfoAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Returns the full record for the given webhook.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWebhook201Response</returns>
        System.Threading.Tasks.Task<CreateWebhook201Response> GetWebhookAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// Returns the full record for the given webhook.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWebhook201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebhook201Response>> GetWebhookWithHttpInfoAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multiple webhooks
        /// </summary>
        /// <remarks>
        /// Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetWebhooks200Response</returns>
        System.Threading.Tasks.Task<GetWebhooks200Response> GetWebhooksAsync (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get multiple webhooks
        /// </summary>
        /// <remarks>
        /// Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetWebhooks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhooks200Response>> GetWebhooksWithHttpInfoAsync (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWebhook201Response</returns>
        System.Threading.Tasks.Task<CreateWebhook201Response> UpdateWebhookAsync (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWebhook201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebhook201Response>> UpdateWebhookWithHttpInfoAsync (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private asana.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new asana.Client.Configuration { BasePath = basePath };

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// </summary>
        /// <returns></returns>
        public WebhooksApi()
        {
            this.Configuration = asana.Client.Configuration.Default;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(asana.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = asana.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public asana.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public asana.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Establish a webhook Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>CreateWebhook201Response</returns>
        public CreateWebhook201Response CreateWebhook (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<CreateWebhook201Response> localVarResponse = CreateWebhookWithHttpInfo(createWebhookRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Establish a webhook Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of CreateWebhook201Response</returns>
        public ApiResponse<CreateWebhook201Response> CreateWebhookWithHttpInfo (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'createWebhookRequest' is set
            if (createWebhookRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWebhookRequest' when calling WebhooksApi->CreateWebhook");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (createWebhookRequest != null && createWebhookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWebhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWebhookRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWebhook201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWebhook201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWebhook201Response)));
        }

        /// <summary>
        /// Establish a webhook Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWebhook201Response</returns>
        public async System.Threading.Tasks.Task<CreateWebhook201Response> CreateWebhookAsync (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateWebhook201Response> localVarResponse = await CreateWebhookWithHttpInfoAsync(createWebhookRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Establish a webhook Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest">The webhook workspace and target.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWebhook201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateWebhook201Response>> CreateWebhookWithHttpInfoAsync (CreateWebhookRequest createWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'createWebhookRequest' is set
            if (createWebhookRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWebhookRequest' when calling WebhooksApi->CreateWebhook");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (createWebhookRequest != null && createWebhookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWebhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWebhookRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWebhook201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWebhook201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWebhook201Response)));
        }

        /// <summary>
        /// Delete a webhook This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response DeleteWebhook (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<DeleteAttachment200Response> localVarResponse = DeleteWebhookWithHttpInfo(webhookGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a webhook This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public ApiResponse<DeleteAttachment200Response> DeleteWebhookWithHttpInfo (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'webhookGid' is set
            if (webhookGid == null)
                throw new ApiException(400, "Missing required parameter 'webhookGid' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{webhook_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookGid != null) localVarPathParams.Add("webhook_gid", this.Configuration.ApiClient.ParameterToString(webhookGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAttachment200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAttachment200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAttachment200Response)));
        }

        /// <summary>
        /// Delete a webhook This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> DeleteWebhookAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteAttachment200Response> localVarResponse = await DeleteWebhookWithHttpInfoAsync(webhookGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a webhook This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> DeleteWebhookWithHttpInfoAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookGid' is set
            if (webhookGid == null)
                throw new ApiException(400, "Missing required parameter 'webhookGid' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "/webhooks/{webhook_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookGid != null) localVarPathParams.Add("webhook_gid", this.Configuration.ApiClient.ParameterToString(webhookGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAttachment200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAttachment200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAttachment200Response)));
        }

        /// <summary>
        /// Get a webhook Returns the full record for the given webhook.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>CreateWebhook201Response</returns>
        public CreateWebhook201Response GetWebhook (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<CreateWebhook201Response> localVarResponse = GetWebhookWithHttpInfo(webhookGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook Returns the full record for the given webhook.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of CreateWebhook201Response</returns>
        public ApiResponse<CreateWebhook201Response> GetWebhookWithHttpInfo (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'webhookGid' is set
            if (webhookGid == null)
                throw new ApiException(400, "Missing required parameter 'webhookGid' when calling WebhooksApi->GetWebhook");

            var localVarPath = "/webhooks/{webhook_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookGid != null) localVarPathParams.Add("webhook_gid", this.Configuration.ApiClient.ParameterToString(webhookGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWebhook201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWebhook201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWebhook201Response)));
        }

        /// <summary>
        /// Get a webhook Returns the full record for the given webhook.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWebhook201Response</returns>
        public async System.Threading.Tasks.Task<CreateWebhook201Response> GetWebhookAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateWebhook201Response> localVarResponse = await GetWebhookWithHttpInfoAsync(webhookGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a webhook Returns the full record for the given webhook.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWebhook201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateWebhook201Response>> GetWebhookWithHttpInfoAsync (string webhookGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookGid' is set
            if (webhookGid == null)
                throw new ApiException(400, "Missing required parameter 'webhookGid' when calling WebhooksApi->GetWebhook");

            var localVarPath = "/webhooks/{webhook_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookGid != null) localVarPathParams.Add("webhook_gid", this.Configuration.ApiClient.ParameterToString(webhookGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWebhook201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWebhook201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWebhook201Response)));
        }

        /// <summary>
        /// Get multiple webhooks Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <returns>GetWebhooks200Response</returns>
        public GetWebhooks200Response GetWebhooks (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string))
        {
             ApiResponse<GetWebhooks200Response> localVarResponse = GetWebhooksWithHttpInfo(workspace, optPretty, optFields, limit, offset, resource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple webhooks Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <returns>ApiResponse of GetWebhooks200Response</returns>
        public ApiResponse<GetWebhooks200Response> GetWebhooksWithHttpInfo (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
                throw new ApiException(400, "Missing required parameter 'workspace' when calling WebhooksApi->GetWebhooks");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter
            if (resource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource", resource)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhooks200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetWebhooks200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhooks200Response)));
        }

        /// <summary>
        /// Get multiple webhooks Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetWebhooks200Response</returns>
        public async System.Threading.Tasks.Task<GetWebhooks200Response> GetWebhooksAsync (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetWebhooks200Response> localVarResponse = await GetWebhooksWithHttpInfoAsync(workspace, optPretty, optFields, limit, offset, resource, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multiple webhooks Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace to query for webhooks in.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resource">Only return webhooks for the given resource. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetWebhooks200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWebhooks200Response>> GetWebhooksWithHttpInfoAsync (string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string resource = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
                throw new ApiException(400, "Missing required parameter 'workspace' when calling WebhooksApi->GetWebhooks");

            var localVarPath = "/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter
            if (resource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource", resource)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetWebhooks200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetWebhooks200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetWebhooks200Response)));
        }

        /// <summary>
        /// Update a webhook An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>CreateWebhook201Response</returns>
        public CreateWebhook201Response UpdateWebhook (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<CreateWebhook201Response> localVarResponse = UpdateWebhookWithHttpInfo(webhookGid, updateWebhookRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of CreateWebhook201Response</returns>
        public ApiResponse<CreateWebhook201Response> UpdateWebhookWithHttpInfo (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'webhookGid' is set
            if (webhookGid == null)
                throw new ApiException(400, "Missing required parameter 'webhookGid' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'updateWebhookRequest' is set
            if (updateWebhookRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateWebhookRequest' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "/webhooks/{webhook_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookGid != null) localVarPathParams.Add("webhook_gid", this.Configuration.ApiClient.ParameterToString(webhookGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateWebhookRequest != null && updateWebhookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWebhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWebhook201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWebhook201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWebhook201Response)));
        }

        /// <summary>
        /// Update a webhook An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWebhook201Response</returns>
        public async System.Threading.Tasks.Task<CreateWebhook201Response> UpdateWebhookAsync (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateWebhook201Response> localVarResponse = await UpdateWebhookWithHttpInfoAsync(webhookGid, updateWebhookRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a webhook An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request. 
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookGid">Globally unique identifier for the webhook.</param>
        /// <param name="updateWebhookRequest">The updated filters for the webhook.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWebhook201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateWebhook201Response>> UpdateWebhookWithHttpInfoAsync (string webhookGid, UpdateWebhookRequest updateWebhookRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookGid' is set
            if (webhookGid == null)
                throw new ApiException(400, "Missing required parameter 'webhookGid' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'updateWebhookRequest' is set
            if (updateWebhookRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateWebhookRequest' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "/webhooks/{webhook_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookGid != null) localVarPathParams.Add("webhook_gid", this.Configuration.ApiClient.ParameterToString(webhookGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateWebhookRequest != null && updateWebhookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateWebhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWebhook201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWebhook201Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWebhook201Response)));
        }

    }
}
