/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using asana.Client;
using asana.Model;

namespace asana.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a story on a task
        /// </summary>
        /// <remarks>
        /// Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetStory200Response</returns>
        GetStory200Response CreateStoryForTask (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Create a story on a task
        /// </summary>
        /// <remarks>
        /// Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetStory200Response</returns>
        ApiResponse<GetStory200Response> CreateStoryForTaskWithHttpInfo (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Delete a story
        /// </summary>
        /// <remarks>
        /// Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response DeleteStory (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Delete a story
        /// </summary>
        /// <remarks>
        /// Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> DeleteStoryWithHttpInfo (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get stories from a task
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all stories on the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetStoriesForTask200Response</returns>
        GetStoriesForTask200Response GetStoriesForTask (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));

        /// <summary>
        /// Get stories from a task
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all stories on the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetStoriesForTask200Response</returns>
        ApiResponse<GetStoriesForTask200Response> GetStoriesForTaskWithHttpInfo (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));
        /// <summary>
        /// Get a story
        /// </summary>
        /// <remarks>
        /// Returns the full record for a single story.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetStory200Response</returns>
        GetStory200Response GetStory (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));

        /// <summary>
        /// Get a story
        /// </summary>
        /// <remarks>
        /// Returns the full record for a single story.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetStory200Response</returns>
        ApiResponse<GetStory200Response> GetStoryWithHttpInfo (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));
        /// <summary>
        /// Update a story
        /// </summary>
        /// <remarks>
        /// Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetStory200Response</returns>
        GetStory200Response UpdateStory (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Update a story
        /// </summary>
        /// <remarks>
        /// Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetStory200Response</returns>
        ApiResponse<GetStory200Response> UpdateStoryWithHttpInfo (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a story on a task
        /// </summary>
        /// <remarks>
        /// Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStory200Response</returns>
        System.Threading.Tasks.Task<GetStory200Response> CreateStoryForTaskAsync (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a story on a task
        /// </summary>
        /// <remarks>
        /// Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStory200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStory200Response>> CreateStoryForTaskWithHttpInfoAsync (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a story
        /// </summary>
        /// <remarks>
        /// Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> DeleteStoryAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a story
        /// </summary>
        /// <remarks>
        /// Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> DeleteStoryWithHttpInfoAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get stories from a task
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all stories on the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStoriesForTask200Response</returns>
        System.Threading.Tasks.Task<GetStoriesForTask200Response> GetStoriesForTaskAsync (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get stories from a task
        /// </summary>
        /// <remarks>
        /// Returns the compact records for all stories on the task.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStoriesForTask200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStoriesForTask200Response>> GetStoriesForTaskWithHttpInfoAsync (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a story
        /// </summary>
        /// <remarks>
        /// Returns the full record for a single story.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStory200Response</returns>
        System.Threading.Tasks.Task<GetStory200Response> GetStoryAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a story
        /// </summary>
        /// <remarks>
        /// Returns the full record for a single story.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStory200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStory200Response>> GetStoryWithHttpInfoAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a story
        /// </summary>
        /// <remarks>
        /// Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStory200Response</returns>
        System.Threading.Tasks.Task<GetStory200Response> UpdateStoryAsync (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a story
        /// </summary>
        /// <remarks>
        /// Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStory200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStory200Response>> UpdateStoryWithHttpInfoAsync (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StoriesApi : IStoriesApi
    {
        private asana.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoriesApi(String basePath)
        {
            this.Configuration = new asana.Client.Configuration { BasePath = basePath };

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public StoriesApi()
        {
            this.Configuration = asana.Client.Configuration.Default;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoriesApi(asana.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = asana.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public asana.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public asana.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a story on a task Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetStory200Response</returns>
        public GetStory200Response CreateStoryForTask (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetStory200Response> localVarResponse = CreateStoryForTaskWithHttpInfo(taskGid, updateStoryRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a story on a task Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetStory200Response</returns>
        public ApiResponse<GetStory200Response> CreateStoryForTaskWithHttpInfo (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'taskGid' is set
            if (taskGid == null)
                throw new ApiException(400, "Missing required parameter 'taskGid' when calling StoriesApi->CreateStoryForTask");
            // verify the required parameter 'updateStoryRequest' is set
            if (updateStoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateStoryRequest' when calling StoriesApi->CreateStoryForTask");

            var localVarPath = "/tasks/{task_gid}/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskGid != null) localVarPathParams.Add("task_gid", this.Configuration.ApiClient.ParameterToString(taskGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateStoryRequest != null && updateStoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateStoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStoryRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoryForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStory200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStory200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStory200Response)));
        }

        /// <summary>
        /// Create a story on a task Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStory200Response</returns>
        public async System.Threading.Tasks.Task<GetStory200Response> CreateStoryForTaskAsync (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetStory200Response> localVarResponse = await CreateStoryForTaskWithHttpInfoAsync(taskGid, updateStoryRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a story on a task Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="updateStoryRequest">The story to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStory200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStory200Response>> CreateStoryForTaskWithHttpInfoAsync (string taskGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskGid' is set
            if (taskGid == null)
                throw new ApiException(400, "Missing required parameter 'taskGid' when calling StoriesApi->CreateStoryForTask");
            // verify the required parameter 'updateStoryRequest' is set
            if (updateStoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateStoryRequest' when calling StoriesApi->CreateStoryForTask");

            var localVarPath = "/tasks/{task_gid}/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskGid != null) localVarPathParams.Add("task_gid", this.Configuration.ApiClient.ParameterToString(taskGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateStoryRequest != null && updateStoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateStoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStoryRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStoryForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStory200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStory200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStory200Response)));
        }

        /// <summary>
        /// Delete a story Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response DeleteStory (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<DeleteAttachment200Response> localVarResponse = DeleteStoryWithHttpInfo(storyGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a story Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public ApiResponse<DeleteAttachment200Response> DeleteStoryWithHttpInfo (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'storyGid' is set
            if (storyGid == null)
                throw new ApiException(400, "Missing required parameter 'storyGid' when calling StoriesApi->DeleteStory");

            var localVarPath = "/stories/{story_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storyGid != null) localVarPathParams.Add("story_gid", this.Configuration.ApiClient.ParameterToString(storyGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAttachment200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAttachment200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAttachment200Response)));
        }

        /// <summary>
        /// Delete a story Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> DeleteStoryAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteAttachment200Response> localVarResponse = await DeleteStoryWithHttpInfoAsync(storyGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a story Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> DeleteStoryWithHttpInfoAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'storyGid' is set
            if (storyGid == null)
                throw new ApiException(400, "Missing required parameter 'storyGid' when calling StoriesApi->DeleteStory");

            var localVarPath = "/stories/{story_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storyGid != null) localVarPathParams.Add("story_gid", this.Configuration.ApiClient.ParameterToString(storyGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAttachment200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAttachment200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAttachment200Response)));
        }

        /// <summary>
        /// Get stories from a task Returns the compact records for all stories on the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetStoriesForTask200Response</returns>
        public GetStoriesForTask200Response GetStoriesForTask (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
             ApiResponse<GetStoriesForTask200Response> localVarResponse = GetStoriesForTaskWithHttpInfo(taskGid, optPretty, optFields, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stories from a task Returns the compact records for all stories on the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetStoriesForTask200Response</returns>
        public ApiResponse<GetStoriesForTask200Response> GetStoriesForTaskWithHttpInfo (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
            // verify the required parameter 'taskGid' is set
            if (taskGid == null)
                throw new ApiException(400, "Missing required parameter 'taskGid' when calling StoriesApi->GetStoriesForTask");

            var localVarPath = "/tasks/{task_gid}/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskGid != null) localVarPathParams.Add("task_gid", this.Configuration.ApiClient.ParameterToString(taskGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoriesForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStoriesForTask200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStoriesForTask200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStoriesForTask200Response)));
        }

        /// <summary>
        /// Get stories from a task Returns the compact records for all stories on the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStoriesForTask200Response</returns>
        public async System.Threading.Tasks.Task<GetStoriesForTask200Response> GetStoriesForTaskAsync (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetStoriesForTask200Response> localVarResponse = await GetStoriesForTaskWithHttpInfoAsync(taskGid, optPretty, optFields, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stories from a task Returns the compact records for all stories on the task.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGid">The task to operate on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStoriesForTask200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStoriesForTask200Response>> GetStoriesForTaskWithHttpInfoAsync (string taskGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskGid' is set
            if (taskGid == null)
                throw new ApiException(400, "Missing required parameter 'taskGid' when calling StoriesApi->GetStoriesForTask");

            var localVarPath = "/tasks/{task_gid}/stories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskGid != null) localVarPathParams.Add("task_gid", this.Configuration.ApiClient.ParameterToString(taskGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoriesForTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStoriesForTask200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStoriesForTask200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStoriesForTask200Response)));
        }

        /// <summary>
        /// Get a story Returns the full record for a single story.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetStory200Response</returns>
        public GetStory200Response GetStory (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
             ApiResponse<GetStory200Response> localVarResponse = GetStoryWithHttpInfo(storyGid, optPretty, optFields, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a story Returns the full record for a single story.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetStory200Response</returns>
        public ApiResponse<GetStory200Response> GetStoryWithHttpInfo (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
            // verify the required parameter 'storyGid' is set
            if (storyGid == null)
                throw new ApiException(400, "Missing required parameter 'storyGid' when calling StoriesApi->GetStory");

            var localVarPath = "/stories/{story_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storyGid != null) localVarPathParams.Add("story_gid", this.Configuration.ApiClient.ParameterToString(storyGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStory200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStory200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStory200Response)));
        }

        /// <summary>
        /// Get a story Returns the full record for a single story.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStory200Response</returns>
        public async System.Threading.Tasks.Task<GetStory200Response> GetStoryAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetStory200Response> localVarResponse = await GetStoryWithHttpInfoAsync(storyGid, optPretty, optFields, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a story Returns the full record for a single story.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStory200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStory200Response>> GetStoryWithHttpInfoAsync (string storyGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'storyGid' is set
            if (storyGid == null)
                throw new ApiException(400, "Missing required parameter 'storyGid' when calling StoriesApi->GetStory");

            var localVarPath = "/stories/{story_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storyGid != null) localVarPathParams.Add("story_gid", this.Configuration.ApiClient.ParameterToString(storyGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStory200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStory200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStory200Response)));
        }

        /// <summary>
        /// Update a story Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetStory200Response</returns>
        public GetStory200Response UpdateStory (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetStory200Response> localVarResponse = UpdateStoryWithHttpInfo(storyGid, updateStoryRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a story Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetStory200Response</returns>
        public ApiResponse<GetStory200Response> UpdateStoryWithHttpInfo (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'storyGid' is set
            if (storyGid == null)
                throw new ApiException(400, "Missing required parameter 'storyGid' when calling StoriesApi->UpdateStory");
            // verify the required parameter 'updateStoryRequest' is set
            if (updateStoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateStoryRequest' when calling StoriesApi->UpdateStory");

            var localVarPath = "/stories/{story_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storyGid != null) localVarPathParams.Add("story_gid", this.Configuration.ApiClient.ParameterToString(storyGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateStoryRequest != null && updateStoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateStoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStoryRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStory200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStory200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStory200Response)));
        }

        /// <summary>
        /// Update a story Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetStory200Response</returns>
        public async System.Threading.Tasks.Task<GetStory200Response> UpdateStoryAsync (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetStory200Response> localVarResponse = await UpdateStoryWithHttpInfoAsync(storyGid, updateStoryRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a story Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storyGid">Globally unique identifier for the story.</param>
        /// <param name="updateStoryRequest">The comment story to update.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetStory200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStory200Response>> UpdateStoryWithHttpInfoAsync (string storyGid, UpdateStoryRequest updateStoryRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'storyGid' is set
            if (storyGid == null)
                throw new ApiException(400, "Missing required parameter 'storyGid' when calling StoriesApi->UpdateStory");
            // verify the required parameter 'updateStoryRequest' is set
            if (updateStoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateStoryRequest' when calling StoriesApi->UpdateStory");

            var localVarPath = "/stories/{story_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storyGid != null) localVarPathParams.Add("story_gid", this.Configuration.ApiClient.ParameterToString(storyGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateStoryRequest != null && updateStoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateStoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStoryRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStory200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetStory200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStory200Response)));
        }

    }
}
