/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using asana.Client;
using asana.Model;

namespace asana.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a collaborator to a goal
        /// </summary>
        /// <remarks>
        /// Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        GetGoal200Response AddFollowers (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Add a collaborator to a goal
        /// </summary>
        /// <remarks>
        /// Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        ApiResponse<GetGoal200Response> AddFollowersWithHttpInfo (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetGoal200Response</returns>
        GetGoal200Response CreateGoal (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));

        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        ApiResponse<GetGoal200Response> CreateGoalWithHttpInfo (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));
        /// <summary>
        /// Create a goal metric
        /// </summary>
        /// <remarks>
        /// Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        GetGoal200Response CreateGoalMetric (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Create a goal metric
        /// </summary>
        /// <remarks>
        /// Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        ApiResponse<GetGoal200Response> CreateGoalMetricWithHttpInfo (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response DeleteGoal (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> DeleteGoalWithHttpInfo (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get a goal
        /// </summary>
        /// <remarks>
        /// Returns the complete goal record for a single goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        GetGoal200Response GetGoal (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Get a goal
        /// </summary>
        /// <remarks>
        /// Returns the complete goal record for a single goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        ApiResponse<GetGoal200Response> GetGoalWithHttpInfo (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get goals
        /// </summary>
        /// <remarks>
        /// Returns compact goal records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <returns>GetGoals200Response</returns>
        GetGoals200Response GetGoals (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>));

        /// <summary>
        /// Get goals
        /// </summary>
        /// <remarks>
        /// Returns compact goal records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <returns>ApiResponse of GetGoals200Response</returns>
        ApiResponse<GetGoals200Response> GetGoalsWithHttpInfo (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>));
        /// <summary>
        /// Get parent goals from a goal
        /// </summary>
        /// <remarks>
        /// Returns a compact representation of all of the parent goals of a goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoals200Response</returns>
        GetGoals200Response GetParentGoalsForGoal (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Get parent goals from a goal
        /// </summary>
        /// <remarks>
        /// Returns a compact representation of all of the parent goals of a goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoals200Response</returns>
        ApiResponse<GetGoals200Response> GetParentGoalsForGoalWithHttpInfo (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Remove a collaborator from a goal
        /// </summary>
        /// <remarks>
        /// Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        GetGoal200Response RemoveFollowers (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Remove a collaborator from a goal
        /// </summary>
        /// <remarks>
        /// Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        ApiResponse<GetGoal200Response> RemoveFollowersWithHttpInfo (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        GetGoal200Response UpdateGoal (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        ApiResponse<GetGoal200Response> UpdateGoalWithHttpInfo (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Update a goal metric
        /// </summary>
        /// <remarks>
        /// Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        GetGoal200Response UpdateGoalMetric (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Update a goal metric
        /// </summary>
        /// <remarks>
        /// Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        ApiResponse<GetGoal200Response> UpdateGoalMetricWithHttpInfo (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a collaborator to a goal
        /// </summary>
        /// <remarks>
        /// Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        System.Threading.Tasks.Task<GetGoal200Response> AddFollowersAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a collaborator to a goal
        /// </summary>
        /// <remarks>
        /// Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> AddFollowersWithHttpInfoAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        System.Threading.Tasks.Task<GetGoal200Response> CreateGoalAsync (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> CreateGoalWithHttpInfoAsync (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a goal metric
        /// </summary>
        /// <remarks>
        /// Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        System.Threading.Tasks.Task<GetGoal200Response> CreateGoalMetricAsync (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a goal metric
        /// </summary>
        /// <remarks>
        /// Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> CreateGoalMetricWithHttpInfoAsync (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> DeleteGoalAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> DeleteGoalWithHttpInfoAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a goal
        /// </summary>
        /// <remarks>
        /// Returns the complete goal record for a single goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        System.Threading.Tasks.Task<GetGoal200Response> GetGoalAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a goal
        /// </summary>
        /// <remarks>
        /// Returns the complete goal record for a single goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> GetGoalWithHttpInfoAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get goals
        /// </summary>
        /// <remarks>
        /// Returns compact goal records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoals200Response</returns>
        System.Threading.Tasks.Task<GetGoals200Response> GetGoalsAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get goals
        /// </summary>
        /// <remarks>
        /// Returns compact goal records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoals200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoals200Response>> GetGoalsWithHttpInfoAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get parent goals from a goal
        /// </summary>
        /// <remarks>
        /// Returns a compact representation of all of the parent goals of a goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoals200Response</returns>
        System.Threading.Tasks.Task<GetGoals200Response> GetParentGoalsForGoalAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get parent goals from a goal
        /// </summary>
        /// <remarks>
        /// Returns a compact representation of all of the parent goals of a goal.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoals200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoals200Response>> GetParentGoalsForGoalWithHttpInfoAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a collaborator from a goal
        /// </summary>
        /// <remarks>
        /// Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        System.Threading.Tasks.Task<GetGoal200Response> RemoveFollowersAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a collaborator from a goal
        /// </summary>
        /// <remarks>
        /// Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> RemoveFollowersWithHttpInfoAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        System.Threading.Tasks.Task<GetGoal200Response> UpdateGoalAsync (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> UpdateGoalWithHttpInfoAsync (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a goal metric
        /// </summary>
        /// <remarks>
        /// Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        System.Threading.Tasks.Task<GetGoal200Response> UpdateGoalMetricAsync (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a goal metric
        /// </summary>
        /// <remarks>
        /// Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> UpdateGoalMetricWithHttpInfoAsync (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GoalsApi : IGoalsApi
    {
        private asana.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalsApi(String basePath)
        {
            this.Configuration = new asana.Client.Configuration { BasePath = basePath };

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class
        /// </summary>
        /// <returns></returns>
        public GoalsApi()
        {
            this.Configuration = asana.Client.Configuration.Default;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GoalsApi(asana.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = asana.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public asana.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public asana.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a collaborator to a goal Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        public GetGoal200Response AddFollowers (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetGoal200Response> localVarResponse = AddFollowersWithHttpInfo(goalGid, addFollowersRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a collaborator to a goal Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        public ApiResponse<GetGoal200Response> AddFollowersWithHttpInfo (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->AddFollowers");
            // verify the required parameter 'addFollowersRequest' is set
            if (addFollowersRequest == null)
                throw new ApiException(400, "Missing required parameter 'addFollowersRequest' when calling GoalsApi->AddFollowers");

            var localVarPath = "/goals/{goal_gid}/addFollowers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (addFollowersRequest != null && addFollowersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFollowersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFollowersRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Add a collaborator to a goal Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        public async System.Threading.Tasks.Task<GetGoal200Response> AddFollowersAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoal200Response> localVarResponse = await AddFollowersWithHttpInfoAsync(goalGid, addFollowersRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a collaborator to a goal Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be added as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> AddFollowersWithHttpInfoAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->AddFollowers");
            // verify the required parameter 'addFollowersRequest' is set
            if (addFollowersRequest == null)
                throw new ApiException(400, "Missing required parameter 'addFollowersRequest' when calling GoalsApi->AddFollowers");

            var localVarPath = "/goals/{goal_gid}/addFollowers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (addFollowersRequest != null && addFollowersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFollowersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFollowersRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Create a goal Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetGoal200Response</returns>
        public GetGoal200Response CreateGoal (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
             ApiResponse<GetGoal200Response> localVarResponse = CreateGoalWithHttpInfo(updateGoalRequest, optPretty, optFields, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a goal Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        public ApiResponse<GetGoal200Response> CreateGoalWithHttpInfo (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
            // verify the required parameter 'updateGoalRequest' is set
            if (updateGoalRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGoalRequest' when calling GoalsApi->CreateGoal");

            var localVarPath = "/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (updateGoalRequest != null && updateGoalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGoalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGoalRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Create a goal Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        public async System.Threading.Tasks.Task<GetGoal200Response> CreateGoalAsync (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoal200Response> localVarResponse = await CreateGoalWithHttpInfoAsync(updateGoalRequest, optPretty, optFields, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a goal Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGoalRequest">The goal to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> CreateGoalWithHttpInfoAsync (UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'updateGoalRequest' is set
            if (updateGoalRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGoalRequest' when calling GoalsApi->CreateGoal");

            var localVarPath = "/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (updateGoalRequest != null && updateGoalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGoalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGoalRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Create a goal metric Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        public GetGoal200Response CreateGoalMetric (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetGoal200Response> localVarResponse = CreateGoalMetricWithHttpInfo(goalGid, createGoalMetricRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a goal metric Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        public ApiResponse<GetGoal200Response> CreateGoalMetricWithHttpInfo (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->CreateGoalMetric");
            // verify the required parameter 'createGoalMetricRequest' is set
            if (createGoalMetricRequest == null)
                throw new ApiException(400, "Missing required parameter 'createGoalMetricRequest' when calling GoalsApi->CreateGoalMetric");

            var localVarPath = "/goals/{goal_gid}/setMetric";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (createGoalMetricRequest != null && createGoalMetricRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGoalMetricRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGoalMetricRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoalMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Create a goal metric Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        public async System.Threading.Tasks.Task<GetGoal200Response> CreateGoalMetricAsync (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoal200Response> localVarResponse = await CreateGoalMetricWithHttpInfoAsync(goalGid, createGoalMetricRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a goal metric Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="createGoalMetricRequest">The goal metric to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> CreateGoalMetricWithHttpInfoAsync (string goalGid, CreateGoalMetricRequest createGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->CreateGoalMetric");
            // verify the required parameter 'createGoalMetricRequest' is set
            if (createGoalMetricRequest == null)
                throw new ApiException(400, "Missing required parameter 'createGoalMetricRequest' when calling GoalsApi->CreateGoalMetric");

            var localVarPath = "/goals/{goal_gid}/setMetric";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (createGoalMetricRequest != null && createGoalMetricRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGoalMetricRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGoalMetricRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoalMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Delete a goal A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response DeleteGoal (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<DeleteAttachment200Response> localVarResponse = DeleteGoalWithHttpInfo(goalGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a goal A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public ApiResponse<DeleteAttachment200Response> DeleteGoalWithHttpInfo (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->DeleteGoal");

            var localVarPath = "/goals/{goal_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAttachment200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAttachment200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAttachment200Response)));
        }

        /// <summary>
        /// Delete a goal A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> DeleteGoalAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteAttachment200Response> localVarResponse = await DeleteGoalWithHttpInfoAsync(goalGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a goal A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> DeleteGoalWithHttpInfoAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->DeleteGoal");

            var localVarPath = "/goals/{goal_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAttachment200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAttachment200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAttachment200Response)));
        }

        /// <summary>
        /// Get a goal Returns the complete goal record for a single goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        public GetGoal200Response GetGoal (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetGoal200Response> localVarResponse = GetGoalWithHttpInfo(goalGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a goal Returns the complete goal record for a single goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        public ApiResponse<GetGoal200Response> GetGoalWithHttpInfo (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->GetGoal");

            var localVarPath = "/goals/{goal_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Get a goal Returns the complete goal record for a single goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        public async System.Threading.Tasks.Task<GetGoal200Response> GetGoalAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoal200Response> localVarResponse = await GetGoalWithHttpInfoAsync(goalGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a goal Returns the complete goal record for a single goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> GetGoalWithHttpInfoAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->GetGoal");

            var localVarPath = "/goals/{goal_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Get goals Returns compact goal records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <returns>GetGoals200Response</returns>
        public GetGoals200Response GetGoals (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>))
        {
             ApiResponse<GetGoals200Response> localVarResponse = GetGoalsWithHttpInfo(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get goals Returns compact goal records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <returns>ApiResponse of GetGoals200Response</returns>
        public ApiResponse<GetGoals200Response> GetGoalsWithHttpInfo (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>))
        {

            var localVarPath = "/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (portfolio != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio", portfolio)); // query parameter
            if (project != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project", project)); // query parameter
            if (isWorkspaceLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_workspace_level", isWorkspaceLevel)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter
            if (timePeriods != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "time_periods", timePeriods)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoals200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoals200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoals200Response)));
        }

        /// <summary>
        /// Get goals Returns compact goal records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoals200Response</returns>
        public async System.Threading.Tasks.Task<GetGoals200Response> GetGoalsAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoals200Response> localVarResponse = await GetGoalsWithHttpInfoAsync(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get goals Returns compact goal records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="portfolio">Globally unique identifier for supporting portfolio. (optional)</param>
        /// <param name="project">Globally unique identifier for supporting project. (optional)</param>
        /// <param name="isWorkspaceLevel">Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. (optional)</param>
        /// <param name="timePeriods">Globally unique identifiers for the time periods. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoals200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoals200Response>> GetGoalsWithHttpInfoAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string portfolio = default(string), string project = default(string), bool? isWorkspaceLevel = default(bool?), string team = default(string), string workspace = default(string), List<string> timePeriods = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (portfolio != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio", portfolio)); // query parameter
            if (project != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project", project)); // query parameter
            if (isWorkspaceLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_workspace_level", isWorkspaceLevel)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter
            if (timePeriods != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "time_periods", timePeriods)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoals200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoals200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoals200Response)));
        }

        /// <summary>
        /// Get parent goals from a goal Returns a compact representation of all of the parent goals of a goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoals200Response</returns>
        public GetGoals200Response GetParentGoalsForGoal (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetGoals200Response> localVarResponse = GetParentGoalsForGoalWithHttpInfo(goalGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get parent goals from a goal Returns a compact representation of all of the parent goals of a goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoals200Response</returns>
        public ApiResponse<GetGoals200Response> GetParentGoalsForGoalWithHttpInfo (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->GetParentGoalsForGoal");

            var localVarPath = "/goals/{goal_gid}/parentGoals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentGoalsForGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoals200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoals200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoals200Response)));
        }

        /// <summary>
        /// Get parent goals from a goal Returns a compact representation of all of the parent goals of a goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoals200Response</returns>
        public async System.Threading.Tasks.Task<GetGoals200Response> GetParentGoalsForGoalAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoals200Response> localVarResponse = await GetParentGoalsForGoalWithHttpInfoAsync(goalGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get parent goals from a goal Returns a compact representation of all of the parent goals of a goal.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoals200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoals200Response>> GetParentGoalsForGoalWithHttpInfoAsync (string goalGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->GetParentGoalsForGoal");

            var localVarPath = "/goals/{goal_gid}/parentGoals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentGoalsForGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoals200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoals200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoals200Response)));
        }

        /// <summary>
        /// Remove a collaborator from a goal Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        public GetGoal200Response RemoveFollowers (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetGoal200Response> localVarResponse = RemoveFollowersWithHttpInfo(goalGid, addFollowersRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a collaborator from a goal Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        public ApiResponse<GetGoal200Response> RemoveFollowersWithHttpInfo (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->RemoveFollowers");
            // verify the required parameter 'addFollowersRequest' is set
            if (addFollowersRequest == null)
                throw new ApiException(400, "Missing required parameter 'addFollowersRequest' when calling GoalsApi->RemoveFollowers");

            var localVarPath = "/goals/{goal_gid}/removeFollowers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (addFollowersRequest != null && addFollowersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFollowersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFollowersRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Remove a collaborator from a goal Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        public async System.Threading.Tasks.Task<GetGoal200Response> RemoveFollowersAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoal200Response> localVarResponse = await RemoveFollowersWithHttpInfoAsync(goalGid, addFollowersRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a collaborator from a goal Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addFollowersRequest">The followers to be removed as collaborators</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> RemoveFollowersWithHttpInfoAsync (string goalGid, AddFollowersRequest addFollowersRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->RemoveFollowers");
            // verify the required parameter 'addFollowersRequest' is set
            if (addFollowersRequest == null)
                throw new ApiException(400, "Missing required parameter 'addFollowersRequest' when calling GoalsApi->RemoveFollowers");

            var localVarPath = "/goals/{goal_gid}/removeFollowers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (addFollowersRequest != null && addFollowersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFollowersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFollowersRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Update a goal An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        public GetGoal200Response UpdateGoal (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetGoal200Response> localVarResponse = UpdateGoalWithHttpInfo(goalGid, updateGoalRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        public ApiResponse<GetGoal200Response> UpdateGoalWithHttpInfo (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->UpdateGoal");
            // verify the required parameter 'updateGoalRequest' is set
            if (updateGoalRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGoalRequest' when calling GoalsApi->UpdateGoal");

            var localVarPath = "/goals/{goal_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateGoalRequest != null && updateGoalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGoalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGoalRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Update a goal An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        public async System.Threading.Tasks.Task<GetGoal200Response> UpdateGoalAsync (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoal200Response> localVarResponse = await UpdateGoalWithHttpInfoAsync(goalGid, updateGoalRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a goal An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalRequest">The updated fields for the goal.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> UpdateGoalWithHttpInfoAsync (string goalGid, UpdateGoalRequest updateGoalRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->UpdateGoal");
            // verify the required parameter 'updateGoalRequest' is set
            if (updateGoalRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGoalRequest' when calling GoalsApi->UpdateGoal");

            var localVarPath = "/goals/{goal_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateGoalRequest != null && updateGoalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGoalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGoalRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Update a goal metric Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetGoal200Response</returns>
        public GetGoal200Response UpdateGoalMetric (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetGoal200Response> localVarResponse = UpdateGoalMetricWithHttpInfo(goalGid, updateGoalMetricRequest, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal metric Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetGoal200Response</returns>
        public ApiResponse<GetGoal200Response> UpdateGoalMetricWithHttpInfo (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->UpdateGoalMetric");
            // verify the required parameter 'updateGoalMetricRequest' is set
            if (updateGoalMetricRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGoalMetricRequest' when calling GoalsApi->UpdateGoalMetric");

            var localVarPath = "/goals/{goal_gid}/setMetricCurrentValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateGoalMetricRequest != null && updateGoalMetricRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGoalMetricRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGoalMetricRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoalMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

        /// <summary>
        /// Update a goal metric Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetGoal200Response</returns>
        public async System.Threading.Tasks.Task<GetGoal200Response> UpdateGoalMetricAsync (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetGoal200Response> localVarResponse = await UpdateGoalMetricWithHttpInfoAsync(goalGid, updateGoalMetricRequest, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a goal metric Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="updateGoalMetricRequest">The updated fields for the goal metric.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetGoal200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGoal200Response>> UpdateGoalMetricWithHttpInfoAsync (string goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
                throw new ApiException(400, "Missing required parameter 'goalGid' when calling GoalsApi->UpdateGoalMetric");
            // verify the required parameter 'updateGoalMetricRequest' is set
            if (updateGoalMetricRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGoalMetricRequest' when calling GoalsApi->UpdateGoalMetric");

            var localVarPath = "/goals/{goal_gid}/setMetricCurrentValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalGid != null) localVarPathParams.Add("goal_gid", this.Configuration.ApiClient.ParameterToString(goalGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (updateGoalMetricRequest != null && updateGoalMetricRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGoalMetricRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGoalMetricRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoalMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGoal200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetGoal200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGoal200Response)));
        }

    }
}
