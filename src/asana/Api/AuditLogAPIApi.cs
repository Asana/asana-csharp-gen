/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using asana.Client;
using asana.Model;

namespace asana.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get audit log events
        /// </summary>
        /// <remarks>
        /// Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetAuditLogEvents200Response</returns>
        GetAuditLogEvents200Response GetAuditLogEvents (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string));

        /// <summary>
        /// Get audit log events
        /// </summary>
        /// <remarks>
        /// Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetAuditLogEvents200Response</returns>
        ApiResponse<GetAuditLogEvents200Response> GetAuditLogEventsWithHttpInfo (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get audit log events
        /// </summary>
        /// <remarks>
        /// Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAuditLogEvents200Response</returns>
        System.Threading.Tasks.Task<GetAuditLogEvents200Response> GetAuditLogEventsAsync (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get audit log events
        /// </summary>
        /// <remarks>
        /// Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAuditLogEvents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAuditLogEvents200Response>> GetAuditLogEventsWithHttpInfoAsync (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditLogAPIApi : IAuditLogAPIApi
    {
        private asana.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogAPIApi(String basePath)
        {
            this.Configuration = new asana.Client.Configuration { BasePath = basePath };

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogAPIApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuditLogAPIApi()
        {
            this.Configuration = asana.Client.Configuration.Default;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditLogAPIApi(asana.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = asana.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public asana.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public asana.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get audit log events Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetAuditLogEvents200Response</returns>
        public GetAuditLogEvents200Response GetAuditLogEvents (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string))
        {
             ApiResponse<GetAuditLogEvents200Response> localVarResponse = GetAuditLogEventsWithHttpInfo(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log events Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetAuditLogEvents200Response</returns>
        public ApiResponse<GetAuditLogEvents200Response> GetAuditLogEventsWithHttpInfo (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string))
        {
            // verify the required parameter 'workspaceGid' is set
            if (workspaceGid == null)
                throw new ApiException(400, "Missing required parameter 'workspaceGid' when calling AuditLogAPIApi->GetAuditLogEvents");

            var localVarPath = "/workspaces/{workspace_gid}/audit_log_events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceGid != null) localVarPathParams.Add("workspace_gid", this.Configuration.ApiClient.ParameterToString(workspaceGid)); // path parameter
            if (startAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_at", startAt)); // query parameter
            if (endAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_at", endAt)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_type", eventType)); // query parameter
            if (actorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actor_type", actorType)); // query parameter
            if (actorGid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actor_gid", actorGid)); // query parameter
            if (resourceGid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_gid", resourceGid)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuditLogEvents200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAuditLogEvents200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuditLogEvents200Response)));
        }

        /// <summary>
        /// Get audit log events Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAuditLogEvents200Response</returns>
        public async System.Threading.Tasks.Task<GetAuditLogEvents200Response> GetAuditLogEventsAsync (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetAuditLogEvents200Response> localVarResponse = await GetAuditLogEventsWithHttpInfoAsync(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit log events Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.  When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceGid">Globally unique identifier for the workspace or organization.</param>
        /// <param name="startAt">Filter to events created after this time (inclusive). (optional)</param>
        /// <param name="endAt">Filter to events created before this time (exclusive). (optional)</param>
        /// <param name="eventType">Filter to events of this type. Refer to the [Supported AuditLogEvents](/docs/supported-auditlogevents) for a full list of values. (optional)</param>
        /// <param name="actorType">Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)</param>
        /// <param name="actorGid">Filter to events triggered by the actor with this ID. (optional)</param>
        /// <param name="resourceGid">Filter to events with this resource ID. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAuditLogEvents200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAuditLogEvents200Response>> GetAuditLogEventsWithHttpInfoAsync (string workspaceGid, DateTime? startAt = default(DateTime?), DateTime? endAt = default(DateTime?), string eventType = default(string), string actorType = default(string), string actorGid = default(string), string resourceGid = default(string), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'workspaceGid' is set
            if (workspaceGid == null)
                throw new ApiException(400, "Missing required parameter 'workspaceGid' when calling AuditLogAPIApi->GetAuditLogEvents");

            var localVarPath = "/workspaces/{workspace_gid}/audit_log_events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceGid != null) localVarPathParams.Add("workspace_gid", this.Configuration.ApiClient.ParameterToString(workspaceGid)); // path parameter
            if (startAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_at", startAt)); // query parameter
            if (endAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_at", endAt)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_type", eventType)); // query parameter
            if (actorType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actor_type", actorType)); // query parameter
            if (actorGid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actor_gid", actorGid)); // query parameter
            if (resourceGid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_gid", resourceGid)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuditLogEvents200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAuditLogEvents200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuditLogEvents200Response)));
        }

    }
}
