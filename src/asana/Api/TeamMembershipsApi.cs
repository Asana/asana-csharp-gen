/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using asana.Client;
using asana.Model;

namespace asana.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamMembershipsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetTeamMembership200Response</returns>
        GetTeamMembership200Response GetTeamMembership (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));

        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetTeamMembership200Response</returns>
        ApiResponse<GetTeamMembership200Response> GetTeamMembershipWithHttpInfo (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>));
        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <returns>GetTeamMemberships200Response</returns>
        GetTeamMemberships200Response GetTeamMemberships (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string));

        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsWithHttpInfo (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string));
        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetTeamMemberships200Response</returns>
        GetTeamMemberships200Response GetTeamMembershipsForTeam (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));

        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForTeamWithHttpInfo (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));
        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetTeamMemberships200Response</returns>
        GetTeamMemberships200Response GetTeamMembershipsForUser (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));

        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForUserWithHttpInfo (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMembership200Response</returns>
        System.Threading.Tasks.Task<GetTeamMembership200Response> GetTeamMembershipAsync (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMembership200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMembership200Response>> GetTeamMembershipWithHttpInfoAsync (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsWithHttpInfoAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForTeamAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForTeamWithHttpInfoAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForUserAsync (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForUserWithHttpInfoAsync (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamMembershipsApi : ITeamMembershipsApi
    {
        private asana.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMembershipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamMembershipsApi(String basePath)
        {
            this.Configuration = new asana.Client.Configuration { BasePath = basePath };

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMembershipsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TeamMembershipsApi()
        {
            this.Configuration = asana.Client.Configuration.Default;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMembershipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamMembershipsApi(asana.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = asana.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = asana.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public asana.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public asana.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>GetTeamMembership200Response</returns>
        public GetTeamMembership200Response GetTeamMembership (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
             ApiResponse<GetTeamMembership200Response> localVarResponse = GetTeamMembershipWithHttpInfo(teamMembershipGid, optPretty, optFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <returns>ApiResponse of GetTeamMembership200Response</returns>
        public ApiResponse<GetTeamMembership200Response> GetTeamMembershipWithHttpInfo (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>))
        {
            // verify the required parameter 'teamMembershipGid' is set
            if (teamMembershipGid == null)
                throw new ApiException(400, "Missing required parameter 'teamMembershipGid' when calling TeamMembershipsApi->GetTeamMembership");

            var localVarPath = "/team_memberships/{team_membership_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMembershipGid != null) localVarPathParams.Add("team_membership_gid", this.Configuration.ApiClient.ParameterToString(teamMembershipGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMembership200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMembership200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMembership200Response)));
        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMembership200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMembership200Response> GetTeamMembershipAsync (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTeamMembership200Response> localVarResponse = await GetTeamMembershipWithHttpInfoAsync(teamMembershipGid, optPretty, optFields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMembership200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTeamMembership200Response>> GetTeamMembershipWithHttpInfoAsync (string teamMembershipGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamMembershipGid' is set
            if (teamMembershipGid == null)
                throw new ApiException(400, "Missing required parameter 'teamMembershipGid' when calling TeamMembershipsApi->GetTeamMembership");

            var localVarPath = "/team_memberships/{team_membership_gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamMembershipGid != null) localVarPathParams.Add("team_membership_gid", this.Configuration.ApiClient.ParameterToString(teamMembershipGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMembership200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMembership200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMembership200Response)));
        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <returns>GetTeamMemberships200Response</returns>
        public GetTeamMemberships200Response GetTeamMemberships (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string))
        {
             ApiResponse<GetTeamMemberships200Response> localVarResponse = GetTeamMembershipsWithHttpInfo(optPretty, optFields, limit, offset, team, user, workspace);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        public ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsWithHttpInfo (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string))
        {

            var localVarPath = "/team_memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMemberships200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMemberships200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMemberships200Response)));
        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTeamMemberships200Response> localVarResponse = await GetTeamMembershipsWithHttpInfoAsync(optPretty, optFields, limit, offset, team, user, workspace, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsWithHttpInfoAsync (bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), string team = default(string), string user = default(string), string workspace = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/team_memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMemberships200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMemberships200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMemberships200Response)));
        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetTeamMemberships200Response</returns>
        public GetTeamMemberships200Response GetTeamMembershipsForTeam (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
             ApiResponse<GetTeamMemberships200Response> localVarResponse = GetTeamMembershipsForTeamWithHttpInfo(teamGid, optPretty, optFields, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        public ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForTeamWithHttpInfo (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
            // verify the required parameter 'teamGid' is set
            if (teamGid == null)
                throw new ApiException(400, "Missing required parameter 'teamGid' when calling TeamMembershipsApi->GetTeamMembershipsForTeam");

            var localVarPath = "/teams/{team_gid}/team_memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamGid != null) localVarPathParams.Add("team_gid", this.Configuration.ApiClient.ParameterToString(teamGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembershipsForTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMemberships200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMemberships200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMemberships200Response)));
        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForTeamAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTeamMemberships200Response> localVarResponse = await GetTeamMembershipsForTeamWithHttpInfoAsync(teamGid, optPretty, optFields, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForTeamWithHttpInfoAsync (string teamGid, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'teamGid' is set
            if (teamGid == null)
                throw new ApiException(400, "Missing required parameter 'teamGid' when calling TeamMembershipsApi->GetTeamMembershipsForTeam");

            var localVarPath = "/teams/{team_gid}/team_memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamGid != null) localVarPathParams.Add("team_gid", this.Configuration.ApiClient.ParameterToString(teamGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembershipsForTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMemberships200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMemberships200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMemberships200Response)));
        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>GetTeamMemberships200Response</returns>
        public GetTeamMemberships200Response GetTeamMembershipsForUser (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
             ApiResponse<GetTeamMemberships200Response> localVarResponse = GetTeamMembershipsForUserWithHttpInfo(userGid, workspace, optPretty, optFields, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        public ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForUserWithHttpInfo (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string))
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
                throw new ApiException(400, "Missing required parameter 'userGid' when calling TeamMembershipsApi->GetTeamMembershipsForUser");
            // verify the required parameter 'workspace' is set
            if (workspace == null)
                throw new ApiException(400, "Missing required parameter 'workspace' when calling TeamMembershipsApi->GetTeamMembershipsForUser");

            var localVarPath = "/users/{user_gid}/team_memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGid != null) localVarPathParams.Add("user_gid", this.Configuration.ApiClient.ParameterToString(userGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembershipsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMemberships200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMemberships200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMemberships200Response)));
        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForUserAsync (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTeamMemberships200Response> localVarResponse = await GetTeamMembershipsForUserWithHttpInfoAsync(userGid, workspace, optPretty, optFields, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="asana.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForUserWithHttpInfoAsync (string userGid, string workspace, bool? optPretty = default(bool?), List<string> optFields = default(List<string>), int? limit = default(int?), string offset = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
                throw new ApiException(400, "Missing required parameter 'userGid' when calling TeamMembershipsApi->GetTeamMembershipsForUser");
            // verify the required parameter 'workspace' is set
            if (workspace == null)
                throw new ApiException(400, "Missing required parameter 'workspace' when calling TeamMembershipsApi->GetTeamMembershipsForUser");

            var localVarPath = "/users/{user_gid}/team_memberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGid != null) localVarPathParams.Add("user_gid", this.Configuration.ApiClient.ParameterToString(userGid)); // path parameter
            if (optPretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "opt_pretty", optPretty)); // query parameter
            if (optFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "opt_fields", optFields)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (workspace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "workspace", workspace)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (personalAccessToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMembershipsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTeamMemberships200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTeamMemberships200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTeamMemberships200Response)));
        }

    }
}
