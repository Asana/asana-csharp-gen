/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using asana.Client;
using asana.Api;
using asana.Model;

namespace asana.Test
{
    /// <summary>
    ///  Class for testing ProjectsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProjectsApiTests
    {
        private ProjectsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProjectsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProjectsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ProjectsApi
            //Assert.IsInstanceOf(typeof(ProjectsApi), instance);
        }

        
        /// <summary>
        /// Test AddCustomFieldSettingForProject
        /// </summary>
        [Test]
        public void AddCustomFieldSettingForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest = null;
            //bool? optPretty = null;
            //var response = instance.AddCustomFieldSettingForProject(projectGid, addCustomFieldSettingForPortfolioRequest, optPretty);
            //Assert.IsInstanceOf(typeof(AddCustomFieldSettingForPortfolio200Response), response, "response is AddCustomFieldSettingForPortfolio200Response");
        }
        
        /// <summary>
        /// Test AddFollowersForProject
        /// </summary>
        [Test]
        public void AddFollowersForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //AddFollowersForProjectRequest addFollowersForProjectRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.AddFollowersForProject(projectGid, addFollowersForProjectRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test AddMembersForProject
        /// </summary>
        [Test]
        public void AddMembersForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //AddMembersForPortfolioRequest addMembersForPortfolioRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.AddMembersForProject(projectGid, addMembersForPortfolioRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test CreateProject
        /// </summary>
        [Test]
        public void CreateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateProjectRequest createProjectRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.CreateProject(createProjectRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test CreateProjectForTeam
        /// </summary>
        [Test]
        public void CreateProjectForTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamGid = null;
            //CreateProjectRequest createProjectRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.CreateProjectForTeam(teamGid, createProjectRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test CreateProjectForWorkspace
        /// </summary>
        [Test]
        public void CreateProjectForWorkspaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workspaceGid = null;
            //CreateProjectRequest createProjectRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.CreateProjectForWorkspace(workspaceGid, createProjectRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test DeleteProject
        /// </summary>
        [Test]
        public void DeleteProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.DeleteProject(projectGid, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(DeleteAttachment200Response), response, "response is DeleteAttachment200Response");
        }
        
        /// <summary>
        /// Test DuplicateProject
        /// </summary>
        [Test]
        public void DuplicateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //DuplicateProjectRequest duplicateProjectRequest = null;
            //var response = instance.DuplicateProject(projectGid, optPretty, optFields, duplicateProjectRequest);
            //Assert.IsInstanceOf(typeof(GetJob200Response), response, "response is GetJob200Response");
        }
        
        /// <summary>
        /// Test GetProject
        /// </summary>
        [Test]
        public void GetProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.GetProject(projectGid, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test GetProjects
        /// </summary>
        [Test]
        public void GetProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //string workspace = null;
            //string team = null;
            //bool? archived = null;
            //var response = instance.GetProjects(optPretty, optFields, limit, offset, workspace, team, archived);
            //Assert.IsInstanceOf(typeof(GetItemsForPortfolio200Response), response, "response is GetItemsForPortfolio200Response");
        }
        
        /// <summary>
        /// Test GetProjectsForTask
        /// </summary>
        [Test]
        public void GetProjectsForTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.GetProjectsForTask(taskGid, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(GetItemsForPortfolio200Response), response, "response is GetItemsForPortfolio200Response");
        }
        
        /// <summary>
        /// Test GetProjectsForTeam
        /// </summary>
        [Test]
        public void GetProjectsForTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //bool? archived = null;
            //var response = instance.GetProjectsForTeam(teamGid, optPretty, optFields, limit, offset, archived);
            //Assert.IsInstanceOf(typeof(GetItemsForPortfolio200Response), response, "response is GetItemsForPortfolio200Response");
        }
        
        /// <summary>
        /// Test GetProjectsForWorkspace
        /// </summary>
        [Test]
        public void GetProjectsForWorkspaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workspaceGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //bool? archived = null;
            //var response = instance.GetProjectsForWorkspace(workspaceGid, optPretty, optFields, limit, offset, archived);
            //Assert.IsInstanceOf(typeof(GetItemsForPortfolio200Response), response, "response is GetItemsForPortfolio200Response");
        }
        
        /// <summary>
        /// Test GetTaskCountsForProject
        /// </summary>
        [Test]
        public void GetTaskCountsForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.GetTaskCountsForProject(projectGid, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(GetTaskCountsForProject200Response), response, "response is GetTaskCountsForProject200Response");
        }
        
        /// <summary>
        /// Test ProjectSaveAsTemplate
        /// </summary>
        [Test]
        public void ProjectSaveAsTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //ProjectSaveAsTemplateRequest projectSaveAsTemplateRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.ProjectSaveAsTemplate(projectGid, projectSaveAsTemplateRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetJob200Response), response, "response is GetJob200Response");
        }
        
        /// <summary>
        /// Test RemoveCustomFieldSettingForProject
        /// </summary>
        [Test]
        public void RemoveCustomFieldSettingForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest = null;
            //bool? optPretty = null;
            //var response = instance.RemoveCustomFieldSettingForProject(projectGid, removeCustomFieldSettingForPortfolioRequest, optPretty);
            //Assert.IsInstanceOf(typeof(DeleteAttachment200Response), response, "response is DeleteAttachment200Response");
        }
        
        /// <summary>
        /// Test RemoveFollowersForProject
        /// </summary>
        [Test]
        public void RemoveFollowersForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //RemoveFollowersForProjectRequest removeFollowersForProjectRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.RemoveFollowersForProject(projectGid, removeFollowersForProjectRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test RemoveMembersForProject
        /// </summary>
        [Test]
        public void RemoveMembersForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.RemoveMembersForProject(projectGid, removeMembersForPortfolioRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
        /// <summary>
        /// Test UpdateProject
        /// </summary>
        [Test]
        public void UpdateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //CreateProjectRequest createProjectRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.UpdateProject(projectGid, createProjectRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateProject201Response), response, "response is CreateProject201Response");
        }
        
    }

}
