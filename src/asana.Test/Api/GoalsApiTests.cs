/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using asana.Client;
using asana.Api;
using asana.Model;

namespace asana.Test
{
    /// <summary>
    ///  Class for testing GoalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GoalsApiTests
    {
        private GoalsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GoalsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GoalsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' GoalsApi
            //Assert.IsInstanceOf(typeof(GoalsApi), instance);
        }

        
        /// <summary>
        /// Test AddFollowers
        /// </summary>
        [Test]
        public void AddFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //AddFollowersRequest addFollowersRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.AddFollowers(goalGid, addFollowersRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetGoal200Response), response, "response is GetGoal200Response");
        }
        
        /// <summary>
        /// Test CreateGoal
        /// </summary>
        [Test]
        public void CreateGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateGoalRequest updateGoalRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.CreateGoal(updateGoalRequest, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(GetGoal200Response), response, "response is GetGoal200Response");
        }
        
        /// <summary>
        /// Test CreateGoalMetric
        /// </summary>
        [Test]
        public void CreateGoalMetricTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //CreateGoalMetricRequest createGoalMetricRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.CreateGoalMetric(goalGid, createGoalMetricRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetGoal200Response), response, "response is GetGoal200Response");
        }
        
        /// <summary>
        /// Test DeleteGoal
        /// </summary>
        [Test]
        public void DeleteGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.DeleteGoal(goalGid, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(DeleteAttachment200Response), response, "response is DeleteAttachment200Response");
        }
        
        /// <summary>
        /// Test GetGoal
        /// </summary>
        [Test]
        public void GetGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.GetGoal(goalGid, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetGoal200Response), response, "response is GetGoal200Response");
        }
        
        /// <summary>
        /// Test GetGoals
        /// </summary>
        [Test]
        public void GetGoalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //string portfolio = null;
            //string project = null;
            //bool? isWorkspaceLevel = null;
            //string team = null;
            //string workspace = null;
            //List<string> timePeriods = null;
            //var response = instance.GetGoals(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods);
            //Assert.IsInstanceOf(typeof(GetGoals200Response), response, "response is GetGoals200Response");
        }
        
        /// <summary>
        /// Test GetParentGoalsForGoal
        /// </summary>
        [Test]
        public void GetParentGoalsForGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.GetParentGoalsForGoal(goalGid, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetGoals200Response), response, "response is GetGoals200Response");
        }
        
        /// <summary>
        /// Test RemoveFollowers
        /// </summary>
        [Test]
        public void RemoveFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //AddFollowersRequest addFollowersRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.RemoveFollowers(goalGid, addFollowersRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetGoal200Response), response, "response is GetGoal200Response");
        }
        
        /// <summary>
        /// Test UpdateGoal
        /// </summary>
        [Test]
        public void UpdateGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //UpdateGoalRequest updateGoalRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.UpdateGoal(goalGid, updateGoalRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetGoal200Response), response, "response is GetGoal200Response");
        }
        
        /// <summary>
        /// Test UpdateGoalMetric
        /// </summary>
        [Test]
        public void UpdateGoalMetricTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //UpdateGoalMetricRequest updateGoalMetricRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.UpdateGoalMetric(goalGid, updateGoalMetricRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(GetGoal200Response), response, "response is GetGoal200Response");
        }
        
    }

}
