/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using asana.Client;
using asana.Api;
using asana.Model;

namespace asana.Test
{
    /// <summary>
    ///  Class for testing TagsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TagsApiTests
    {
        private TagsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TagsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TagsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TagsApi
            //Assert.IsInstanceOf(typeof(TagsApi), instance);
        }

        
        /// <summary>
        /// Test CreateTag
        /// </summary>
        [Test]
        public void CreateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTagRequest createTagRequest = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.CreateTag(createTagRequest, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateTag201Response), response, "response is CreateTag201Response");
        }
        
        /// <summary>
        /// Test CreateTagForWorkspace
        /// </summary>
        [Test]
        public void CreateTagForWorkspaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workspaceGid = null;
            //CreateTag201Response createTag201Response = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //var response = instance.CreateTagForWorkspace(workspaceGid, createTag201Response, optPretty, optFields);
            //Assert.IsInstanceOf(typeof(CreateTag201Response), response, "response is CreateTag201Response");
        }
        
        /// <summary>
        /// Test DeleteTag
        /// </summary>
        [Test]
        public void DeleteTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.DeleteTag(tagGid, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(DeleteAttachment200Response), response, "response is DeleteAttachment200Response");
        }
        
        /// <summary>
        /// Test GetTag
        /// </summary>
        [Test]
        public void GetTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.GetTag(tagGid, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(CreateTag201Response), response, "response is CreateTag201Response");
        }
        
        /// <summary>
        /// Test GetTags
        /// </summary>
        [Test]
        public void GetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //string workspace = null;
            //var response = instance.GetTags(optPretty, optFields, limit, offset, workspace);
            //Assert.IsInstanceOf(typeof(GetTags200Response), response, "response is GetTags200Response");
        }
        
        /// <summary>
        /// Test GetTagsForTask
        /// </summary>
        [Test]
        public void GetTagsForTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.GetTagsForTask(taskGid, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(GetTags200Response), response, "response is GetTags200Response");
        }
        
        /// <summary>
        /// Test GetTagsForWorkspace
        /// </summary>
        [Test]
        public void GetTagsForWorkspaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workspaceGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.GetTagsForWorkspace(workspaceGid, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(GetTags200Response), response, "response is GetTags200Response");
        }
        
        /// <summary>
        /// Test UpdateTag
        /// </summary>
        [Test]
        public void UpdateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGid = null;
            //bool? optPretty = null;
            //List<string> optFields = null;
            //int? limit = null;
            //string offset = null;
            //var response = instance.UpdateTag(tagGid, optPretty, optFields, limit, offset);
            //Assert.IsInstanceOf(typeof(CreateTag201Response), response, "response is CreateTag201Response");
        }
        
    }

}
